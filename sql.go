// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const UNIQUE = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const SHOW = 57458
const DESCRIBE = 57459
const EXPLAIN = 57460
const DATE = 57461
const ESCAPE = 57462
const REPAIR = 57463
const OPTIMIZE = 57464
const TRUNCATE = 57465
const MAXVALUE = 57466
const PARTITION = 57467
const REORGANIZE = 57468
const LESS = 57469
const THAN = 57470
const PROCEDURE = 57471
const TRIGGER = 57472
const VINDEX = 57473
const VINDEXES = 57474
const STATUS = 57475
const VARIABLES = 57476
const BEGIN = 57477
const START = 57478
const TRANSACTION = 57479
const COMMIT = 57480
const ROLLBACK = 57481
const BIT = 57482
const TINYINT = 57483
const SMALLINT = 57484
const MEDIUMINT = 57485
const INT = 57486
const INTEGER = 57487
const BIGINT = 57488
const INTNUM = 57489
const SMALLSERIAL = 57490
const SERIAL = 57491
const BIGSERIAL = 57492
const REAL = 57493
const DOUBLE = 57494
const FLOAT_TYPE = 57495
const DECIMAL = 57496
const NUMERIC = 57497
const TIME = 57498
const TIMESTAMP = 57499
const DATETIME = 57500
const YEAR = 57501
const CHAR = 57502
const VARCHAR = 57503
const BOOL = 57504
const CHARACTER = 57505
const VARBINARY = 57506
const NCHAR = 57507
const TEXT = 57508
const TINYTEXT = 57509
const MEDIUMTEXT = 57510
const LONGTEXT = 57511
const BLOB = 57512
const TINYBLOB = 57513
const MEDIUMBLOB = 57514
const LONGBLOB = 57515
const JSON = 57516
const ENUM = 57517
const GEOMETRY = 57518
const POINT = 57519
const LINESTRING = 57520
const POLYGON = 57521
const GEOMETRYCOLLECTION = 57522
const MULTIPOINT = 57523
const MULTILINESTRING = 57524
const MULTIPOLYGON = 57525
const NULLX = 57526
const AUTO_INCREMENT = 57527
const APPROXNUM = 57528
const SIGNED = 57529
const UNSIGNED = 57530
const ZEROFILL = 57531
const DATABASES = 57532
const TABLES = 57533
const VITESS_KEYSPACES = 57534
const VITESS_SHARDS = 57535
const VITESS_TABLETS = 57536
const VSCHEMA_TABLES = 57537
const EXTENDED = 57538
const FULL = 57539
const PROCESSLIST = 57540
const NAMES = 57541
const CHARSET = 57542
const GLOBAL = 57543
const SESSION = 57544
const ISOLATION = 57545
const LEVEL = 57546
const READ = 57547
const WRITE = 57548
const ONLY = 57549
const REPEATABLE = 57550
const COMMITTED = 57551
const UNCOMMITTED = 57552
const SERIALIZABLE = 57553
const CURRENT_TIMESTAMP = 57554
const DATABASE = 57555
const CURRENT_DATE = 57556
const CURRENT_TIME = 57557
const LOCALTIME = 57558
const LOCALTIMESTAMP = 57559
const UTC_DATE = 57560
const UTC_TIME = 57561
const UTC_TIMESTAMP = 57562
const REPLACE = 57563
const CONVERT = 57564
const CAST = 57565
const SUBSTR = 57566
const SUBSTRING = 57567
const GROUP_CONCAT = 57568
const SEPARATOR = 57569
const MATCH = 57570
const AGAINST = 57571
const BOOLEAN = 57572
const LANGUAGE = 57573
const WITH = 57574
const QUERY = 57575
const EXPANSION = 57576
const UNUSED = 57577

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"SMALLSERIAL",
	"SERIAL",
	"BIGSERIAL",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	150, 266,
	151, 266,
	-2, 256,
	-1, 241,
	109, 590,
	-2, 586,
	-1, 242,
	109, 591,
	-2, 587,
	-1, 311,
	80, 749,
	-2, 58,
	-1, 312,
	80, 710,
	-2, 59,
	-1, 317,
	80, 694,
	-2, 552,
	-1, 319,
	80, 731,
	-2, 554,
	-1, 578,
	52, 41,
	54, 41,
	-2, 43,
	-1, 714,
	109, 593,
	-2, 589,
	-1, 918,
	5, 28,
	-2, 398,
	-1, 943,
	5, 27,
	-2, 527,
	-1, 1167,
	5, 28,
	-2, 528,
	-1, 1211,
	5, 27,
	-2, 530,
	-1, 1273,
	5, 28,
	-2, 531,
}

const yyPrivate = 57344

const yyLast = 11060

var yyAct = [...]int16{
	272, 47, 1264, 860, 652, 776, 525, 1222, 246, 1173,
	1075, 1103, 794, 816, 1076, 271, 840, 1004, 572, 815,
	1072, 220, 570, 854, 962, 946, 777, 214, 739, 1049,
	910, 1007, 53, 995, 812, 746, 826, 316, 588, 458,
	951, 716, 749, 413, 464, 850, 587, 310, 47, 559,
	574, 478, 773, 765, 470, 229, 225, 298, 52, 305,
	244, 892, 302, 1293, 307, 1283, 1291, 297, 1271, 1289,
	861, 215, 216, 217, 218, 1282, 1067, 1161, 417, 834,
	1231, 438, 970, 877, 296, 969, 1097, 807, 971, 1098,
	1099, 524, 3, 808, 809, 539, 453, 876, 1270, 589,
	986, 590, 233, 1246, 491, 490, 500, 501, 493, 494,
	495, 496, 497, 498, 499, 492, 681, 833, 502, 184,
	180, 181, 182, 682, 881, 57, 1185, 1109, 1110, 1111,
	1200, 841, 1150, 875, 1148, 1114, 1112, 213, 1290, 219,
	449, 450, 1288, 427, 440, 426, 442, 1265, 1028, 774,
	59, 60, 61, 62, 63, 1229, 1223, 420, 177, 178,
	178, 660, 651, 795, 797, 828, 961, 960, 828, 1225,
	242, 439, 441, 959, 415, 423, 828, 192, 179, 1251,
	1170, 872, 869, 870, 1036, 868, 514, 515, 926, 904,
	688, 482, 433, 980, 813, 1118, 414, 444, 444, 444,
	444, 76, 444, 502, 492, 189, 1025, 502, 189, 444,
	879, 882, 1027, 491, 490, 500, 501, 493, 494, 495,
	496, 497, 498, 499, 492, 685, 47, 502, 477, 887,
	748, 183, 189, 189, 76, 1015, 1224, 796, 189, 1256,
	76, 511, 1128, 949, 513, 1119, 1032, 591, 874, 1069,
	766, 923, 1230, 1228, 841, 437, 466, 827, 443, 911,
	827, 655, 1247, 1013, 984, 825, 823, 235, 827, 824,
	873, 523, 50, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 719, 538, 540, 540, 540, 540, 540, 540,
	540, 540, 548, 549, 550, 551, 472, 1269, 1113, 476,
	475, 476, 475, 571, 1026, 419, 1024, 878, 888, 475,
	1259, 766, 1015, 933, 830, 239, 477, 467, 477, 831,
	880, 1275, 1031, 1050, 1191, 477, 456, 1014, 429, 430,
	431, 723, 1019, 1016, 1009, 1010, 1017, 1012, 1011, 1190,
	1013, 901, 902, 903, 176, 721, 722, 720, 189, 1018,
	189, 999, 468, 1052, 998, 1021, 189, 495, 496, 497,
	498, 499, 492, 189, 579, 502, 987, 76, 76, 76,
	76, 1276, 76, 585, 740, 1257, 741, 421, 422, 76,
	541, 542, 543, 544, 545, 546, 547, 457, 1054, 1207,
	1058, 1188, 1053, 687, 1051, 1136, 706, 708, 709, 1056,
	922, 707, 921, 996, 1014, 295, 76, 1254, 1055, 1019,
	1016, 1009, 1010, 1017, 1012, 1011, 1106, 444, 476, 475,
	1105, 1057, 1059, 1279, 457, 444, 1018, 476, 475, 686,
	691, 692, 1008, 981, 1071, 477, 444, 444, 444, 444,
	444, 444, 444, 444, 477, 476, 475, 1215, 1262, 1235,
	444, 444, 1215, 457, 1215, 1216, 446, 447, 448, 972,
	451, 863, 477, 1182, 1181, 1234, 189, 455, 742, 270,
	666, 669, 665, 189, 189, 189, 476, 475, 23, 76,
	1094, 457, 1169, 457, 1115, 76, 1125, 1124, 693, 461,
	465, 1121, 1122, 477, 656, 667, 1121, 1120, 916, 457,
	74, 717, 941, 556, 457, 942, 483, 261, 260, 263,
	264, 265, 266, 654, 47, 649, 262, 267, 751, 457,
	714, 598, 597, 947, 695, 50, 435, 428, 527, 414,
	21, 710, 555, 315, 1073, 23, 582, 947, 948, 418,
	526, 758, 761, 751, 712, 54, 1039, 767, 928, 537,
	948, 1165, 801, 925, 581, 23, 556, 302, 302, 302,
	302, 302, 1210, 556, 778, 516, 517, 518, 519, 520,
	521, 522, 571, 1127, 798, 743, 744, 583, 1123, 581,
	556, 302, 50, 653, 916, 770, 224, 76, 973, 916,
	763, 927, 947, 189, 189, 76, 924, 189, 806, 916,
	189, 584, 50, 802, 189, 689, 76, 76, 76, 76,
	76, 76, 76, 76, 226, 780, 781, 791, 783, 753,
	76, 76, 50, 1195, 779, 189, 799, 782, 842, 843,
	844, 800, 804, 805, 835, 855, 1088, 976, 952, 953,
	76, 851, 820, 846, 189, 561, 564, 565, 566, 562,
	76, 563, 567, 845, 65, 444, 1108, 444, 858, 701,
	1073, 50, 1000, 753, 955, 444, 315, 315, 315, 315,
	663, 315, 856, 454, 788, 650, 786, 958, 315, 789,
	957, 787, 790, 659, 565, 566, 836, 837, 838, 839,
	785, 852, 853, 76, 670, 671, 672, 673, 674, 675,
	676, 677, 847, 848, 849, 480, 784, 1287, 678, 679,
	230, 231, 1281, 1035, 905, 493, 494, 495, 496, 497,
	498, 499, 492, 889, 189, 502, 714, 189, 189, 189,
	189, 189, 1286, 894, 893, 471, 717, 899, 898, 189,
	991, 459, 189, 703, 704, 596, 189, 436, 983, 469,
	1163, 189, 189, 460, 1261, 76, 1260, 1208, 977, 754,
	755, 1196, 906, 865, 662, 762, 569, 471, 76, 227,
	228, 221, 897, 1240, 944, 945, 222, 54, 315, 769,
	896, 771, 772, 445, 593, 1239, 561, 564, 565, 566,
	562, 1198, 563, 567, 694, 526, 952, 953, 756, 757,
	715, 948, 302, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 932, 473,
	1248, 1186, 189, 956, 965, 76, 964, 76, 966, 974,
	684, 189, 56, 58, 189, 76, 580, 51, 1, 862,
	1003, 871, 1263, 1221, 1102, 967, 822, 313, 814, 412,
	64, 750, 752, 988, 989, 1255, 821, 1227, 1184, 811,
	444, 978, 979, 829, 985, 943, 832, 768, 1107, 1258,
	982, 603, 601, 602, 600, 990, 605, 992, 993, 994,
	997, 604, 599, 200, 308, 444, 315, 568, 592, 857,
	474, 66, 1023, 1022, 315, 1006, 867, 793, 1030, 680,
	886, 1020, 452, 202, 510, 315, 315, 315, 315, 315,
	315, 315, 315, 864, 895, 866, 968, 314, 1080, 315,
	315, 690, 463, 885, 1238, 1197, 931, 536, 764, 247,
	705, 900, 259, 256, 258, 257, 696, 940, 1043, 697,
	484, 1042, 245, 1078, 237, 47, 300, 1074, 552, 480,
	778, 1060, 315, 1061, 890, 891, 778, 465, 1077, 1048,
	1090, 1091, 1092, 1068, 714, 560, 558, 557, 954, 76,
	1082, 950, 189, 299, 1084, 1038, 1160, 1245, 915, 1083,
	700, 25, 55, 232, 19, 18, 76, 17, 20, 1101,
	16, 1096, 745, 1100, 930, 15, 14, 1095, 29, 13,
	12, 11, 759, 759, 10, 9, 8, 7, 759, 500,
	501, 493, 494, 495, 496, 497, 498, 499, 492, 917,
	6, 502, 5, 1116, 1117, 759, 4, 223, 22, 76,
	76, 2, 76, 0, 934, 1129, 1079, 907, 908, 909,
	302, 0, 0, 0, 0, 0, 248, 0, 1131, 0,
	0, 1134, 0, 0, 315, 76, 0, 0, 189, 189,
	0, 0, 1139, 0, 1138, 0, 189, 315, 1159, 913,
	0, 0, 0, 914, 0, 76, 0, 0, 1146, 0,
	918, 919, 920, 0, 0, 0, 0, 0, 0, 929,
	0, 0, 313, 0, 935, 1164, 936, 937, 938, 939,
	1175, 1176, 1177, 0, 0, 1172, 0, 0, 301, 0,
	0, 0, 1178, 0, 974, 76, 76, 1180, 1002, 0,
	0, 0, 0, 0, 315, 0, 315, 444, 0, 0,
	1143, 1144, 0, 1145, 315, 0, 1147, 1187, 1149, 1189,
	0, 0, 1194, 1029, 76, 1193, 76, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 1199, 0, 0, 0, 0, 1078, 0, 0, 1212,
	0, 189, 0, 0, 0, 0, 0, 0, 0, 76,
	1209, 1077, 0, 0, 1183, 0, 0, 0, 0, 0,
	0, 1220, 76, 189, 1226, 0, 0, 1237, 0, 76,
	0, 1070, 0, 0, 0, 1236, 0, 76, 0, 0,
	189, 1078, 0, 47, 0, 0, 1085, 1086, 0, 0,
	1087, 1249, 1232, 1089, 1233, 0, 1077, 1045, 1046, 1253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1062, 1063, 1047, 1065, 1066, 462, 0, 1267, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 778, 0, 76,
	1211, 76, 76, 76, 189, 76, 713, 1277, 963, 0,
	0, 76, 0, 0, 0, 303, 0, 0, 0, 0,
	187, 1284, 1285, 212, 0, 315, 0, 0, 0, 1093,
	512, 1292, 0, 0, 0, 0, 1044, 76, 76, 76,
	1137, 0, 0, 0, 1250, 236, 0, 187, 187, 0,
	186, 0, 0, 187, 0, 0, 491, 490, 500, 501,
	493, 494, 495, 496, 497, 498, 499, 492, 1001, 315,
	502, 315, 0, 0, 0, 0, 0, 0, 306, 1162,
	76, 76, 0, 416, 0, 0, 526, 0, 0, 301,
	0, 0, 0, 76, 315, 0, 0, 0, 0, 0,
	1141, 0, 0, 0, 0, 0, 76, 0, 313, 1140,
	0, 0, 0, 0, 315, 0, 1142, 0, 0, 0,
	0, 817, 0, 0, 0, 1192, 76, 1151, 1152, 1153,
	0, 0, 1156, 0, 0, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 1166, 1167, 1168, 198, 1171,
	0, 759, 0, 0, 1081, 963, 0, 759, 0, 0,
	0, 0, 76, 187, 0, 187, 0, 0, 0, 0,
	0, 187, 208, 0, 0, 0, 76, 1158, 187, 0,
	0, 0, 0, 315, 0, 315, 1104, 0, 0, 0,
	0, 0, 0, 424, 0, 425, 0, 0, 0, 0,
	0, 432, 0, 0, 0, 0, 0, 0, 434, 0,
	1201, 1202, 713, 1203, 1204, 1205, 0, 0, 1130, 0,
	0, 0, 193, 0, 0, 0, 0, 1206, 195, 0,
	0, 1132, 0, 0, 0, 201, 197, 0, 1135, 0,
	0, 0, 1217, 1218, 1219, 0, 315, 1266, 526, 491,
	490, 500, 501, 493, 494, 495, 496, 497, 498, 499,
	492, 0, 199, 502, 0, 203, 0, 0, 1241, 1242,
	1243, 1244, 718, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 187, 576,
	187, 0, 0, 0, 0, 0, 194, 0, 1174, 0,
	1174, 1174, 1174, 0, 1179, 0, 0, 0, 0, 0,
	315, 554, 1268, 0, 0, 0, 0, 1273, 0, 0,
	578, 0, 0, 196, 0, 204, 205, 206, 207, 211,
	1278, 0, 0, 0, 210, 209, 315, 315, 315, 817,
	0, 0, 0, 301, 301, 301, 301, 301, 1294, 0,
	0, 0, 0, 0, 0, 0, 1157, 457, 301, 0,
	0, 1296, 1297, 0, 0, 0, 0, 301, 490, 500,
	501, 493, 494, 495, 496, 497, 498, 499, 492, 1213,
	1214, 502, 0, 0, 0, 1005, 0, 0, 0, 0,
	0, 0, 1104, 491, 490, 500, 501, 493, 494, 495,
	496, 497, 498, 499, 492, 1174, 0, 502, 187, 187,
	0, 0, 187, 0, 0, 187, 0, 0, 0, 668,
	0, 0, 0, 0, 0, 1252, 0, 0, 1041, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 657, 658,
	187, 0, 661, 0, 0, 664, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 759, 187,
	0, 1274, 0, 0, 0, 0, 0, 0, 668, 0,
	683, 0, 0, 0, 0, 1280, 0, 0, 0, 0,
	0, 0, 0, 0, 23, 24, 48, 26, 27, 702,
	0, 0, 0, 0, 0, 0, 0, 817, 1155, 817,
	0, 0, 0, 42, 0, 0, 0, 718, 28, 236,
	0, 0, 0, 0, 236, 236, 0, 0, 760, 760,
	236, 0, 0, 0, 760, 0, 0, 37, 0, 0,
	0, 50, 0, 0, 236, 236, 236, 236, 0, 187,
	0, 760, 187, 187, 187, 187, 187, 0, 0, 0,
	0, 0, 0, 0, 792, 0, 0, 187, 0, 0,
	1041, 576, 0, 0, 0, 0, 187, 187, 0, 775,
	491, 490, 500, 501, 493, 494, 495, 496, 497, 498,
	499, 492, 0, 0, 502, 0, 0, 0, 301, 0,
	30, 31, 33, 32, 35, 0, 0, 803, 0, 620,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 43, 44, 0, 0, 45, 46, 34, 457,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 0,
	38, 39, 0, 40, 41, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 187,
	0, 1005, 817, 1154, 457, 491, 490, 500, 501, 493,
	494, 495, 496, 497, 498, 499, 492, 859, 0, 502,
	0, 0, 0, 0, 668, 608, 883, 0, 0, 884,
	0, 0, 0, 0, 0, 0, 236, 0, 0, 0,
	491, 490, 500, 501, 493, 494, 495, 496, 497, 498,
	499, 492, 0, 0, 502, 621, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 634, 635, 636, 640,
	641, 642, 643, 236, 637, 638, 639, 644, 645, 646,
	647, 648, 622, 623, 624, 625, 606, 607, 0, 236,
	609, 0, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 626, 627, 628, 629, 630, 631, 632, 633,
	0, 0, 486, 0, 489, 0, 0, 0, 0, 0,
	503, 504, 505, 506, 507, 508, 509, 187, 487, 488,
	485, 491, 490, 500, 501, 493, 494, 495, 496, 497,
	498, 499, 492, 0, 0, 502, 0, 912, 491, 490,
	500, 501, 493, 494, 495, 496, 497, 498, 499, 492,
	0, 0, 502, 0, 0, 0, 301, 491, 490, 500,
	501, 493, 494, 495, 496, 497, 498, 499, 492, 0,
	0, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1033, 1034, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 236, 0, 0, 0, 0, 0, 0, 0,
	0, 1037, 668, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 760, 0, 0,
	0, 0, 0, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 0, 0, 0, 1126, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 401, 391, 0, 363, 403, 341, 355, 411, 356,
	357, 384, 327, 371, 125, 353, 0, 344, 322, 350,
	323, 342, 365, 93, 368, 340, 393, 374, 107, 409,
	109, 379, 0, 142, 118, 0, 0, 367, 395, 369,
	389, 362, 385, 332, 378, 404, 354, 382, 405, 0,
	0, 0, 75, 0, 818, 819, 0, 0, 0, 0,
	0, 86, 0, 381, 400, 352, 383, 321, 380, 0,
	325, 328, 410, 398, 347, 348, 975, 0, 0, 0,
	0, 0, 0, 366, 370, 386, 360, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 0, 377, 0, 0,
	0, 329, 326, 0, 364, 0, 0, 0, 331, 0,
	346, 387, 0, 320, 390, 396, 361, 190, 399, 359,
	358, 402, 131, 0, 760, 148, 98, 97, 106, 394,
	343, 351, 89, 349, 137, 127, 160, 376, 128, 136,
	110, 152, 132, 159, 191, 167, 150, 166, 78, 149,
	158, 87, 139, 80, 156, 144, 116, 102, 103, 79,
	0, 145, 146, 147, 135, 92, 96, 91, 124, 153,
	154, 90, 174, 83, 165, 82, 84, 164, 123, 151,
	157, 117, 114, 81, 155, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 324, 0,
	143, 162, 175, 339, 397, 168, 169, 170, 171, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 173,
	126, 138, 88, 161, 141, 335, 338, 333, 334, 372,
	373, 406, 407, 408, 388, 330, 0, 336, 337, 0,
	392, 375, 77, 0, 108, 172, 133, 95, 163, 401,
	391, 0, 363, 403, 341, 355, 411, 356, 357, 384,
	327, 371, 125, 353, 0, 344, 322, 350, 323, 342,
	365, 93, 368, 340, 393, 374, 107, 409, 109, 379,
	0, 142, 118, 0, 0, 367, 395, 369, 389, 362,
	385, 332, 378, 404, 354, 382, 405, 0, 0, 0,
	75, 0, 818, 819, 0, 0, 0, 0, 0, 86,
	0, 381, 400, 352, 383, 321, 380, 0, 325, 328,
	410, 398, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 366, 370, 386, 360, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 0, 377, 0, 0, 0, 329,
	326, 0, 364, 0, 0, 0, 331, 0, 346, 387,
	0, 320, 390, 396, 361, 190, 399, 359, 358, 402,
	131, 0, 0, 148, 98, 97, 106, 394, 343, 351,
	89, 349, 137, 127, 160, 376, 128, 136, 110, 152,
	132, 159, 191, 167, 150, 166, 78, 149, 158, 87,
	139, 80, 156, 144, 116, 102, 103, 79, 0, 145,
	146, 147, 135, 92, 96, 91, 124, 153, 154, 90,
	174, 83, 165, 82, 84, 164, 123, 151, 157, 117,
	114, 81, 155, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 324, 0, 143, 162,
	175, 339, 397, 168, 169, 170, 171, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 173, 126, 138,
	88, 161, 141, 335, 338, 333, 334, 372, 373, 406,
	407, 408, 388, 330, 0, 336, 337, 0, 392, 375,
	77, 0, 108, 172, 133, 95, 163, 401, 391, 0,
	363, 403, 341, 355, 411, 356, 357, 384, 327, 371,
	125, 353, 0, 344, 322, 350, 323, 342, 365, 93,
	368, 340, 393, 374, 107, 409, 109, 379, 0, 142,
	118, 0, 0, 367, 395, 369, 389, 362, 385, 332,
	378, 404, 354, 382, 405, 50, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 381,
	400, 352, 383, 321, 380, 0, 325, 328, 410, 398,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 366,
	370, 386, 360, 0, 0, 0, 0, 0, 0, 0,
	0, 345, 0, 377, 0, 0, 0, 329, 326, 0,
	364, 0, 0, 0, 331, 0, 346, 387, 0, 320,
	390, 396, 361, 190, 399, 359, 358, 402, 131, 0,
	0, 148, 98, 97, 106, 394, 343, 351, 89, 349,
	137, 127, 160, 376, 128, 136, 110, 152, 132, 159,
	191, 167, 150, 166, 78, 149, 158, 87, 139, 80,
	156, 144, 116, 102, 103, 79, 0, 145, 146, 147,
	135, 92, 96, 91, 124, 153, 154, 90, 174, 83,
	165, 82, 84, 164, 123, 151, 157, 117, 114, 81,
	155, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 324, 0, 143, 162, 175, 339,
	397, 168, 169, 170, 171, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 173, 126, 138, 88, 161,
	141, 335, 338, 333, 334, 372, 373, 406, 407, 408,
	388, 330, 0, 336, 337, 0, 392, 375, 77, 0,
	108, 172, 133, 95, 163, 401, 391, 0, 363, 403,
	341, 355, 411, 356, 357, 384, 327, 371, 125, 353,
	0, 344, 322, 350, 323, 342, 365, 93, 368, 340,
	393, 374, 107, 409, 109, 379, 0, 142, 118, 0,
	0, 367, 395, 369, 389, 362, 385, 332, 378, 404,
	354, 382, 405, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 381, 400, 352,
	383, 321, 380, 0, 325, 328, 410, 398, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 366, 370, 386,
	360, 0, 0, 0, 0, 0, 0, 1040, 0, 345,
	0, 377, 0, 0, 0, 329, 326, 0, 364, 0,
	0, 0, 331, 0, 346, 387, 0, 320, 390, 396,
	361, 190, 399, 359, 358, 402, 131, 0, 0, 148,
	98, 97, 106, 394, 343, 351, 89, 349, 137, 127,
	160, 376, 128, 136, 110, 152, 132, 159, 191, 167,
	150, 166, 78, 149, 158, 87, 139, 80, 156, 144,
	116, 102, 103, 79, 0, 145, 146, 147, 135, 92,
	96, 91, 124, 153, 154, 90, 174, 83, 165, 82,
	84, 164, 123, 151, 157, 117, 114, 81, 155, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 324, 0, 143, 162, 175, 339, 397, 168,
	169, 170, 171, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 173, 126, 138, 88, 161, 141, 335,
	338, 333, 334, 372, 373, 406, 407, 408, 388, 330,
	0, 336, 337, 0, 392, 375, 77, 0, 108, 172,
	133, 95, 163, 401, 391, 0, 363, 403, 341, 355,
	411, 356, 357, 384, 327, 371, 125, 353, 0, 344,
	322, 350, 323, 342, 365, 93, 368, 340, 393, 374,
	107, 409, 109, 379, 0, 142, 118, 0, 0, 367,
	395, 369, 389, 362, 385, 332, 378, 404, 354, 382,
	405, 0, 0, 0, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 381, 400, 352, 383, 321,
	380, 0, 325, 328, 410, 398, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 366, 370, 386, 360, 0,
	0, 0, 0, 0, 0, 711, 0, 345, 0, 377,
	0, 0, 0, 329, 326, 0, 364, 0, 0, 0,
	331, 0, 346, 387, 0, 320, 390, 396, 361, 190,
	399, 359, 358, 402, 131, 0, 0, 148, 98, 97,
	106, 394, 343, 351, 89, 349, 137, 127, 160, 376,
	128, 136, 110, 152, 132, 159, 191, 167, 150, 166,
	78, 149, 158, 87, 139, 80, 156, 144, 116, 102,
	103, 79, 0, 145, 146, 147, 135, 92, 96, 91,
	124, 153, 154, 90, 174, 83, 165, 82, 84, 164,
	123, 151, 157, 117, 114, 81, 155, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	324, 0, 143, 162, 175, 339, 397, 168, 169, 170,
	171, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 173, 126, 138, 88, 161, 141, 335, 338, 333,
	334, 372, 373, 406, 407, 408, 388, 330, 0, 336,
	337, 0, 392, 375, 77, 0, 108, 172, 133, 95,
	163, 401, 391, 0, 363, 403, 341, 355, 411, 356,
	357, 384, 327, 371, 125, 353, 0, 344, 322, 350,
	323, 342, 365, 93, 368, 340, 393, 374, 107, 409,
	109, 379, 0, 142, 118, 0, 0, 367, 395, 369,
	389, 362, 385, 332, 378, 404, 354, 382, 405, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 381, 400, 352, 383, 321, 380, 0,
	325, 328, 410, 398, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 366, 370, 386, 360, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 0, 377, 0, 0,
	0, 329, 326, 0, 364, 0, 0, 0, 331, 0,
	346, 387, 0, 320, 390, 396, 361, 190, 399, 359,
	358, 402, 131, 0, 0, 148, 98, 97, 106, 394,
	343, 351, 89, 349, 137, 127, 160, 376, 128, 136,
	110, 152, 132, 159, 191, 167, 150, 166, 78, 149,
	158, 87, 139, 80, 156, 144, 116, 102, 103, 79,
	0, 145, 146, 147, 135, 92, 96, 91, 124, 153,
	154, 90, 174, 83, 165, 82, 84, 164, 123, 151,
	157, 117, 114, 81, 155, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 324, 0,
	143, 162, 175, 339, 397, 168, 169, 170, 171, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 173,
	126, 138, 88, 161, 141, 335, 338, 333, 334, 372,
	373, 406, 407, 408, 388, 330, 0, 336, 337, 0,
	392, 375, 77, 0, 108, 172, 133, 95, 163, 401,
	391, 0, 363, 403, 341, 355, 411, 356, 357, 384,
	327, 371, 125, 353, 0, 344, 322, 350, 323, 342,
	365, 93, 368, 340, 393, 374, 107, 409, 109, 379,
	0, 142, 118, 0, 0, 367, 395, 369, 389, 362,
	385, 332, 378, 404, 354, 382, 405, 0, 0, 0,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 381, 400, 352, 383, 321, 380, 0, 325, 328,
	410, 398, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 366, 370, 386, 360, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 0, 377, 0, 0, 0, 329,
	326, 0, 364, 0, 0, 0, 331, 0, 346, 387,
	0, 320, 390, 396, 361, 190, 399, 359, 358, 402,
	131, 0, 0, 148, 98, 97, 106, 394, 343, 351,
	89, 349, 137, 127, 160, 376, 128, 136, 110, 152,
	132, 159, 191, 167, 150, 166, 78, 149, 158, 87,
	139, 80, 156, 144, 116, 102, 103, 79, 0, 145,
	146, 147, 135, 92, 96, 91, 124, 153, 154, 90,
	174, 83, 165, 82, 84, 164, 123, 151, 157, 117,
	114, 81, 155, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 324, 0, 143, 162,
	175, 339, 397, 168, 169, 170, 171, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 173, 126, 138,
	88, 161, 141, 335, 338, 333, 334, 372, 373, 406,
	407, 408, 388, 330, 0, 336, 337, 0, 392, 375,
	77, 0, 108, 172, 133, 95, 163, 401, 391, 0,
	363, 403, 341, 355, 411, 356, 357, 384, 327, 371,
	125, 353, 0, 344, 322, 350, 323, 342, 365, 93,
	368, 340, 393, 374, 107, 409, 109, 379, 0, 142,
	118, 0, 0, 367, 395, 369, 389, 362, 385, 332,
	378, 404, 354, 382, 405, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 381,
	400, 352, 383, 321, 380, 0, 325, 328, 410, 398,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 366,
	370, 386, 360, 0, 0, 0, 0, 0, 0, 0,
	0, 345, 0, 377, 0, 0, 0, 329, 326, 0,
	364, 0, 0, 0, 331, 0, 346, 387, 0, 320,
	390, 396, 361, 190, 399, 359, 358, 402, 131, 0,
	0, 148, 98, 97, 106, 394, 343, 351, 89, 349,
	137, 127, 160, 376, 128, 136, 110, 152, 132, 159,
	191, 167, 150, 166, 78, 149, 158, 87, 139, 80,
	156, 144, 116, 102, 103, 79, 0, 145, 146, 147,
	135, 92, 96, 91, 124, 153, 154, 90, 174, 83,
	165, 82, 318, 164, 123, 151, 157, 117, 114, 81,
	155, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 324, 0, 143, 162, 175, 339,
	397, 168, 169, 170, 171, 0, 0, 0, 319, 317,
	101, 140, 104, 111, 134, 173, 126, 138, 88, 161,
	141, 335, 338, 333, 334, 372, 373, 406, 407, 408,
	388, 330, 0, 336, 337, 0, 392, 375, 77, 0,
	108, 172, 133, 95, 163, 401, 391, 0, 363, 403,
	341, 355, 411, 356, 357, 384, 327, 371, 125, 353,
	0, 344, 322, 350, 323, 342, 365, 93, 368, 340,
	393, 374, 107, 409, 109, 379, 0, 142, 118, 0,
	0, 367, 395, 369, 389, 362, 385, 332, 378, 404,
	354, 382, 405, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 381, 400, 352,
	383, 321, 380, 0, 325, 328, 410, 398, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 366, 370, 386,
	360, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	0, 377, 0, 0, 0, 329, 326, 0, 364, 0,
	0, 0, 331, 0, 346, 387, 0, 320, 390, 396,
	361, 190, 399, 359, 358, 402, 131, 0, 0, 148,
	98, 97, 106, 394, 343, 351, 89, 349, 137, 127,
	160, 376, 128, 136, 110, 152, 132, 159, 191, 167,
	150, 166, 78, 149, 158, 87, 139, 80, 156, 144,
	116, 102, 103, 79, 0, 145, 146, 147, 135, 92,
	96, 91, 124, 153, 154, 90, 174, 83, 165, 82,
	84, 164, 123, 151, 157, 117, 114, 81, 155, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 324, 0, 143, 162, 175, 339, 397, 168,
	169, 170, 171, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 173, 126, 138, 88, 161, 141, 335,
	338, 333, 334, 372, 373, 406, 407, 408, 388, 330,
	0, 336, 337, 0, 392, 375, 77, 0, 108, 172,
	133, 95, 163, 401, 391, 0, 363, 403, 341, 355,
	411, 356, 357, 384, 327, 371, 125, 353, 0, 344,
	322, 350, 323, 342, 365, 93, 368, 340, 393, 374,
	107, 409, 109, 379, 0, 142, 118, 0, 0, 367,
	395, 369, 389, 362, 385, 332, 378, 404, 354, 382,
	405, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 381, 400, 352, 383, 321,
	380, 0, 325, 328, 410, 398, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 366, 370, 386, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 345, 0, 377,
	0, 0, 0, 329, 326, 0, 364, 0, 0, 0,
	331, 0, 346, 387, 0, 320, 390, 396, 361, 190,
	399, 359, 358, 402, 131, 0, 0, 148, 98, 97,
	106, 394, 343, 351, 89, 349, 137, 127, 160, 376,
	128, 136, 110, 152, 132, 159, 191, 167, 150, 166,
	78, 149, 586, 87, 139, 80, 156, 144, 116, 102,
	103, 79, 0, 145, 146, 147, 135, 92, 96, 91,
	124, 153, 154, 90, 174, 83, 165, 82, 318, 164,
	123, 151, 157, 117, 114, 81, 155, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	324, 0, 143, 162, 175, 339, 397, 168, 169, 170,
	171, 0, 0, 0, 319, 317, 101, 140, 104, 111,
	134, 173, 126, 138, 88, 161, 141, 335, 338, 333,
	334, 372, 373, 406, 407, 408, 388, 330, 0, 336,
	337, 0, 392, 375, 77, 0, 108, 172, 133, 95,
	163, 401, 391, 0, 363, 403, 341, 355, 411, 356,
	357, 384, 327, 371, 125, 353, 0, 344, 322, 350,
	323, 342, 365, 93, 368, 340, 393, 374, 107, 409,
	109, 379, 0, 142, 118, 0, 0, 367, 395, 369,
	389, 362, 385, 332, 378, 404, 354, 382, 405, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 381, 400, 352, 383, 321, 380, 0,
	325, 328, 410, 398, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 366, 370, 386, 360, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 0, 377, 0, 0,
	0, 329, 326, 0, 364, 0, 0, 0, 331, 0,
	346, 387, 0, 320, 390, 396, 361, 190, 399, 359,
	358, 402, 131, 0, 0, 148, 98, 97, 106, 394,
	343, 351, 89, 349, 137, 127, 160, 376, 128, 136,
	110, 152, 132, 159, 191, 167, 150, 166, 78, 149,
	309, 87, 139, 80, 156, 144, 116, 102, 103, 79,
	0, 145, 146, 147, 135, 92, 96, 91, 124, 153,
	154, 90, 174, 83, 165, 82, 318, 164, 123, 151,
	157, 117, 114, 81, 155, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 324, 0,
	143, 162, 175, 339, 397, 168, 169, 170, 171, 0,
	0, 0, 319, 317, 312, 311, 104, 111, 134, 173,
	126, 138, 88, 161, 141, 335, 338, 333, 334, 372,
	373, 406, 407, 408, 388, 330, 0, 336, 337, 0,
	392, 375, 77, 0, 108, 172, 133, 95, 163, 125,
	0, 0, 747, 0, 243, 0, 0, 0, 93, 0,
	240, 0, 0, 107, 282, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 273, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 241, 261, 260,
	263, 264, 265, 266, 0, 0, 86, 262, 267, 268,
	269, 0, 0, 238, 254, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 234, 0,
	0, 0, 293, 0, 253, 0, 0, 249, 250, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 291, 0, 131, 0, 0,
	148, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 160, 0, 128, 136, 110, 152, 132, 159, 191,
	167, 150, 166, 78, 149, 158, 87, 139, 80, 156,
	144, 116, 102, 103, 79, 0, 145, 146, 147, 135,
	92, 96, 91, 124, 153, 154, 90, 174, 83, 165,
	82, 84, 164, 123, 151, 157, 117, 114, 81, 155,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 162, 175, 0, 0,
	168, 169, 170, 171, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 173, 126, 138, 88, 161, 141,
	283, 292, 289, 290, 287, 288, 286, 285, 284, 294,
	275, 276, 277, 278, 280, 0, 279, 77, 0, 108,
	172, 133, 95, 163, 125, 0, 0, 0, 0, 243,
	0, 0, 0, 93, 0, 240, 0, 0, 107, 282,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 273,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 457, 241, 261, 260, 263, 264, 265, 266, 0,
	0, 86, 262, 267, 268, 269, 0, 0, 238, 254,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 0, 0, 0, 0, 293, 0, 253,
	0, 0, 249, 250, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	291, 0, 131, 0, 0, 148, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 160, 0, 128, 136,
	110, 152, 132, 159, 191, 167, 150, 166, 78, 149,
	158, 87, 139, 80, 156, 144, 116, 102, 103, 79,
	0, 145, 146, 147, 135, 92, 96, 91, 124, 153,
	154, 90, 174, 83, 165, 82, 84, 164, 123, 151,
	157, 117, 114, 81, 155, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 162, 175, 0, 0, 168, 169, 170, 171, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 173,
	126, 138, 88, 161, 141, 283, 292, 289, 290, 287,
	288, 286, 285, 284, 294, 275, 276, 277, 278, 280,
	0, 279, 77, 0, 108, 172, 133, 95, 163, 125,
	0, 0, 0, 0, 243, 0, 0, 0, 93, 0,
	240, 0, 0, 107, 282, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 273, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 241, 261, 260,
	263, 264, 265, 266, 0, 0, 86, 262, 267, 268,
	269, 0, 0, 238, 254, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 234, 0,
	0, 0, 293, 0, 253, 0, 0, 249, 250, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 291, 0, 131, 0, 0,
	148, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 160, 0, 128, 136, 110, 152, 132, 159, 191,
	167, 150, 166, 78, 149, 158, 87, 139, 80, 156,
	144, 116, 102, 103, 79, 0, 145, 146, 147, 135,
	92, 96, 91, 124, 153, 154, 90, 174, 83, 165,
	82, 84, 164, 123, 151, 157, 117, 114, 81, 155,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 162, 175, 0, 0,
	168, 169, 170, 171, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 173, 126, 138, 88, 161, 141,
	283, 292, 289, 290, 287, 288, 286, 285, 284, 294,
	275, 276, 277, 278, 280, 0, 279, 77, 0, 108,
	172, 133, 95, 163, 125, 0, 0, 0, 0, 243,
	0, 0, 0, 93, 0, 240, 0, 0, 107, 282,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 273,
	274, 0, 0, 0, 0, 0, 0, 810, 0, 50,
	0, 0, 241, 261, 260, 263, 264, 265, 266, 0,
	0, 86, 262, 267, 268, 269, 0, 0, 238, 254,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 0, 0, 0, 0, 293, 0, 253,
	0, 0, 249, 250, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	291, 0, 131, 0, 0, 148, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 160, 0, 128, 136,
	110, 152, 132, 159, 191, 167, 150, 166, 78, 149,
	158, 87, 139, 80, 156, 144, 116, 102, 103, 79,
	0, 145, 146, 147, 135, 92, 96, 91, 124, 153,
	154, 90, 174, 83, 165, 82, 84, 164, 123, 151,
	157, 117, 114, 81, 155, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 162, 175, 0, 0, 168, 169, 170, 171, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 173,
	126, 138, 88, 161, 141, 283, 292, 289, 290, 287,
	288, 286, 285, 284, 294, 275, 276, 277, 278, 280,
	23, 279, 77, 0, 108, 172, 133, 95, 163, 0,
	0, 0, 125, 0, 0, 0, 0, 243, 0, 0,
	0, 93, 0, 240, 0, 0, 107, 282, 109, 0,
	0, 142, 118, 0, 0, 0, 0, 273, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	241, 261, 260, 263, 264, 265, 266, 0, 0, 86,
	262, 267, 268, 269, 0, 0, 238, 254, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 0, 0, 0, 0, 293, 0, 253, 0, 0,
	249, 250, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 291, 0,
	131, 0, 0, 148, 98, 97, 106, 0, 0, 0,
	89, 0, 137, 127, 160, 0, 128, 136, 110, 152,
	132, 159, 191, 167, 150, 166, 78, 149, 158, 87,
	139, 80, 156, 144, 116, 102, 103, 79, 0, 145,
	146, 147, 135, 92, 96, 91, 124, 153, 154, 90,
	174, 83, 165, 82, 84, 164, 123, 151, 157, 117,
	114, 81, 155, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 162,
	175, 0, 0, 168, 169, 170, 171, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 173, 126, 138,
	88, 161, 141, 283, 292, 289, 290, 287, 288, 286,
	285, 284, 294, 275, 276, 277, 278, 280, 0, 279,
	77, 0, 108, 172, 133, 95, 163, 125, 0, 0,
	0, 0, 243, 0, 0, 0, 93, 0, 240, 0,
	0, 107, 282, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 273, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 241, 261, 260, 263, 264,
	265, 266, 0, 0, 86, 262, 267, 268, 269, 0,
	0, 238, 254, 0, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 0, 0, 0, 0,
	293, 0, 253, 0, 0, 249, 250, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 291, 0, 131, 0, 0, 148, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 160,
	0, 128, 136, 110, 152, 132, 159, 191, 167, 150,
	166, 78, 149, 158, 87, 139, 80, 156, 144, 116,
	102, 103, 79, 0, 145, 146, 147, 135, 92, 96,
	91, 124, 153, 154, 90, 174, 83, 165, 82, 84,
	164, 123, 151, 157, 117, 114, 81, 155, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 162, 175, 0, 0, 168, 169,
	170, 171, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 173, 126, 138, 88, 161, 141, 283, 292,
	289, 290, 287, 288, 286, 285, 284, 294, 275, 276,
	277, 278, 280, 125, 279, 77, 0, 108, 172, 133,
	95, 163, 93, 0, 0, 0, 0, 107, 282, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 273, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 241, 261, 260, 263, 264, 265, 266, 0, 0,
	86, 262, 267, 268, 269, 0, 0, 0, 254, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 0, 0, 0, 0, 293, 0, 253, 0,
	0, 249, 250, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 291,
	0, 131, 0, 0, 148, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 160, 1295, 128, 136, 110,
	152, 132, 159, 191, 167, 150, 166, 78, 149, 158,
	87, 139, 80, 156, 144, 116, 102, 103, 79, 0,
	145, 146, 147, 135, 92, 96, 91, 124, 153, 154,
	90, 174, 83, 165, 82, 84, 164, 123, 151, 157,
	117, 114, 81, 155, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	162, 175, 0, 0, 168, 169, 170, 171, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 173, 126,
	138, 88, 161, 141, 283, 292, 289, 290, 287, 288,
	286, 285, 284, 294, 275, 276, 277, 278, 280, 125,
	279, 77, 0, 108, 172, 133, 95, 163, 93, 0,
	0, 0, 0, 107, 282, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 273, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 241, 261, 260,
	263, 264, 265, 266, 0, 0, 86, 262, 267, 268,
	269, 0, 0, 0, 254, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 0, 0,
	0, 0, 293, 0, 253, 0, 0, 249, 250, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 291, 0, 131, 0, 0,
	148, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 160, 0, 128, 136, 110, 152, 132, 159, 191,
	167, 150, 166, 78, 149, 158, 87, 139, 80, 156,
	144, 116, 102, 103, 79, 0, 145, 146, 147, 135,
	92, 96, 91, 124, 153, 154, 90, 174, 83, 165,
	82, 84, 164, 123, 151, 157, 117, 114, 81, 155,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 162, 175, 0, 0,
	168, 169, 170, 171, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 173, 126, 138, 88, 161, 141,
	283, 292, 289, 290, 287, 288, 286, 285, 284, 294,
	275, 276, 277, 278, 280, 125, 279, 77, 0, 108,
	172, 133, 95, 163, 93, 0, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 491, 490,
	500, 501, 493, 494, 495, 496, 497, 498, 499, 492,
	0, 0, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 131, 0, 0, 148, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 160, 0, 128,
	136, 110, 152, 132, 159, 191, 167, 150, 166, 78,
	149, 158, 87, 139, 80, 156, 144, 116, 102, 103,
	79, 0, 145, 146, 147, 135, 92, 96, 91, 124,
	153, 154, 90, 174, 83, 165, 82, 84, 164, 123,
	151, 157, 117, 114, 81, 155, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 162, 175, 0, 0, 168, 169, 170, 171,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	173, 126, 138, 88, 161, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 108, 172, 133, 95, 163,
	125, 0, 0, 0, 479, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 107, 0, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	481, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 131, 0,
	0, 148, 98, 97, 106, 0, 0, 0, 89, 0,
	137, 127, 160, 0, 128, 136, 110, 152, 132, 159,
	191, 167, 150, 166, 78, 149, 158, 87, 139, 80,
	156, 144, 116, 102, 103, 79, 0, 145, 146, 147,
	135, 92, 96, 91, 124, 153, 154, 90, 174, 83,
	165, 82, 84, 164, 123, 151, 157, 117, 114, 81,
	155, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 162, 175, 0,
	0, 168, 169, 170, 171, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 173, 126, 138, 88, 161,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 172, 133, 95, 163, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 72, 0, 67,
	0, 0, 0, 73, 131, 0, 0, 148, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 160, 0,
	128, 136, 110, 152, 132, 159, 69, 167, 150, 166,
	78, 149, 158, 87, 139, 80, 156, 144, 116, 102,
	103, 79, 0, 145, 146, 147, 135, 92, 96, 91,
	124, 153, 154, 90, 174, 83, 165, 82, 84, 164,
	123, 151, 157, 117, 114, 81, 155, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 173, 126, 138, 88, 161, 141, 0, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 108, 172, 133, 95,
	163, 125, 0, 0, 0, 575, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 107, 0, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 577, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 131,
	0, 0, 148, 98, 97, 106, 0, 0, 0, 89,
	0, 137, 127, 160, 0, 128, 136, 110, 152, 132,
	159, 191, 167, 150, 166, 78, 149, 158, 87, 139,
	80, 156, 144, 116, 102, 103, 79, 0, 145, 146,
	147, 135, 92, 96, 91, 124, 153, 154, 90, 174,
	83, 165, 82, 84, 164, 123, 151, 157, 117, 114,
	81, 155, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 162, 175,
	0, 0, 168, 169, 170, 171, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 173, 126, 138, 88,
	161, 141, 0, 0, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 172, 133, 95, 163, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 131, 0, 0, 148, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 160,
	0, 128, 136, 110, 152, 132, 159, 191, 167, 150,
	166, 78, 149, 158, 87, 139, 80, 156, 144, 116,
	102, 103, 79, 0, 145, 146, 147, 135, 92, 96,
	91, 124, 153, 154, 90, 174, 83, 165, 82, 84,
	164, 123, 151, 157, 117, 114, 81, 155, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 162, 175, 0, 0, 168, 169,
	170, 171, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 173, 126, 138, 88, 161, 141, 0, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 77, 0, 108, 172, 133,
	95, 163, 93, 0, 0, 0, 0, 107, 0, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 131, 0, 0, 148, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 160, 0, 128, 136, 110,
	152, 132, 159, 191, 167, 150, 166, 78, 149, 158,
	87, 139, 80, 156, 144, 116, 102, 103, 79, 0,
	145, 146, 147, 135, 92, 96, 91, 124, 153, 154,
	90, 174, 83, 165, 82, 84, 164, 123, 151, 157,
	117, 114, 81, 155, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	162, 175, 0, 0, 168, 169, 170, 171, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 173, 126,
	138, 88, 161, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 77, 0, 108, 172, 133, 95, 163, 93, 0,
	0, 0, 0, 107, 0, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	698, 0, 0, 699, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 131, 0, 0,
	148, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 160, 0, 128, 136, 110, 152, 132, 159, 191,
	167, 150, 166, 78, 149, 158, 87, 139, 80, 156,
	144, 116, 102, 103, 79, 0, 145, 146, 147, 135,
	92, 96, 91, 124, 153, 154, 90, 174, 83, 165,
	82, 84, 164, 123, 151, 157, 117, 114, 81, 155,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 162, 175, 0, 0,
	168, 169, 170, 171, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 173, 126, 138, 88, 161, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 77, 0, 108,
	172, 133, 95, 163, 93, 0, 595, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 594, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 131, 0, 0, 148, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 160, 0, 128,
	136, 110, 152, 132, 159, 191, 167, 150, 166, 78,
	149, 158, 87, 139, 80, 156, 144, 116, 102, 103,
	79, 0, 145, 146, 147, 135, 92, 96, 91, 124,
	153, 154, 90, 174, 83, 165, 82, 84, 164, 123,
	151, 157, 117, 114, 81, 155, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 162, 175, 0, 0, 168, 169, 170, 171,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	173, 126, 138, 88, 161, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 108, 172, 133, 95, 163,
	125, 0, 0, 0, 575, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 107, 0, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	577, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 131, 0,
	0, 148, 98, 97, 106, 0, 0, 0, 89, 0,
	137, 127, 160, 0, 573, 136, 110, 152, 132, 159,
	191, 167, 150, 166, 78, 149, 158, 87, 139, 80,
	156, 144, 116, 102, 103, 79, 0, 145, 146, 147,
	135, 92, 96, 91, 124, 153, 154, 90, 174, 83,
	165, 82, 84, 164, 123, 151, 157, 117, 114, 81,
	155, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 162, 175, 0,
	0, 168, 169, 170, 171, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 173, 126, 138, 88, 161,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 172, 133, 95, 163, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 131, 0, 0, 148, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 160, 0,
	128, 136, 110, 152, 132, 159, 191, 167, 150, 166,
	78, 149, 158, 87, 139, 80, 156, 144, 116, 102,
	103, 79, 0, 145, 146, 147, 135, 92, 96, 91,
	124, 153, 154, 90, 174, 83, 165, 82, 84, 164,
	123, 151, 157, 117, 114, 81, 155, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 173, 126, 138, 88, 161, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 77, 0, 108, 172, 133, 95,
	163, 93, 0, 0, 0, 0, 107, 0, 109, 0,
	0, 142, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 577, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	131, 0, 0, 148, 98, 97, 106, 0, 0, 0,
	89, 0, 137, 127, 160, 0, 128, 136, 110, 152,
	132, 159, 191, 167, 150, 166, 78, 149, 158, 87,
	139, 80, 156, 144, 116, 102, 103, 79, 0, 145,
	146, 147, 135, 92, 96, 91, 124, 153, 154, 90,
	174, 83, 165, 82, 84, 164, 123, 151, 157, 117,
	114, 81, 155, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 162,
	175, 0, 0, 168, 169, 170, 171, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 173, 126, 138,
	88, 161, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	77, 0, 108, 172, 133, 95, 163, 93, 0, 0,
	0, 0, 107, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 481, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 131, 0, 0, 148,
	98, 97, 106, 0, 0, 0, 89, 0, 137, 127,
	160, 0, 128, 136, 110, 152, 132, 159, 191, 167,
	150, 166, 78, 149, 158, 87, 139, 80, 156, 144,
	116, 102, 103, 79, 0, 145, 146, 147, 135, 92,
	96, 91, 124, 153, 154, 90, 174, 83, 165, 82,
	84, 164, 123, 151, 157, 117, 114, 81, 155, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 162, 175, 0, 0, 168,
	169, 170, 171, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 173, 126, 138, 88, 161, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 77, 0, 108, 172,
	133, 95, 163, 553, 93, 0, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 131, 0, 0, 148, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 160, 0, 128,
	136, 110, 152, 132, 159, 191, 167, 150, 166, 78,
	149, 158, 87, 139, 80, 156, 144, 116, 102, 103,
	79, 0, 145, 146, 147, 135, 92, 96, 91, 124,
	153, 154, 90, 174, 83, 165, 82, 84, 164, 123,
	151, 157, 117, 114, 81, 155, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 162, 175, 0, 0, 168, 169, 170, 171,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	173, 126, 138, 88, 161, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 125, 0, 77, 0, 108, 172, 133, 95, 163,
	93, 0, 0, 0, 0, 107, 0, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 131,
	0, 0, 148, 98, 97, 106, 0, 0, 0, 89,
	0, 137, 127, 160, 0, 128, 136, 110, 152, 132,
	159, 191, 167, 150, 166, 78, 149, 158, 87, 139,
	80, 156, 144, 116, 102, 103, 79, 0, 145, 146,
	147, 135, 92, 96, 91, 124, 153, 154, 90, 174,
	83, 165, 82, 84, 164, 123, 151, 157, 117, 114,
	81, 155, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 162, 175,
	0, 0, 168, 169, 170, 171, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 173, 126, 138, 88,
	161, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 172, 133, 95, 163, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	190, 0, 0, 0, 0, 131, 0, 0, 148, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 160,
	0, 128, 136, 110, 152, 132, 159, 191, 167, 150,
	166, 78, 149, 158, 87, 139, 80, 156, 144, 116,
	102, 103, 79, 0, 145, 146, 147, 135, 92, 96,
	91, 124, 153, 154, 90, 174, 83, 165, 82, 84,
	164, 123, 151, 157, 117, 114, 81, 155, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 162, 175, 0, 0, 168, 169,
	170, 171, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 173, 126, 138, 88, 161, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 77, 0, 108, 172, 133,
	95, 163, 93, 0, 0, 0, 0, 107, 0, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 131, 0, 0, 148, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 160, 0, 128, 136, 110,
	152, 132, 159, 191, 167, 150, 166, 78, 149, 158,
	87, 139, 80, 156, 144, 116, 102, 103, 79, 0,
	145, 146, 147, 135, 92, 96, 91, 124, 153, 154,
	90, 174, 83, 165, 82, 84, 164, 123, 151, 157,
	117, 114, 81, 155, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	162, 175, 0, 0, 168, 169, 170, 171, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 173, 126,
	138, 88, 161, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 77, 0, 108, 172, 133, 95, 163, 93, 0,
	0, 0, 0, 107, 0, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 131, 0, 0,
	148, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 160, 0, 128, 136, 110, 152, 132, 159, 191,
	167, 150, 166, 78, 149, 158, 87, 139, 80, 156,
	144, 116, 102, 103, 79, 0, 145, 146, 147, 135,
	92, 96, 91, 124, 153, 154, 90, 174, 83, 165,
	82, 84, 164, 123, 151, 157, 117, 114, 81, 155,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 162, 175, 0, 0,
	168, 169, 170, 171, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 173, 126, 138, 88, 161, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 77, 0, 108,
	172, 133, 95, 163, 93, 0, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 131, 0, 0, 148, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 160, 0, 128,
	136, 110, 152, 132, 159, 191, 167, 150, 166, 78,
	149, 158, 87, 139, 80, 156, 144, 116, 102, 103,
	79, 0, 145, 146, 147, 135, 92, 96, 91, 124,
	153, 154, 90, 174, 83, 165, 82, 84, 164, 123,
	151, 157, 117, 114, 81, 155, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 162, 175, 0, 0, 168, 169, 170, 171,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	173, 126, 138, 88, 161, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 108, 172, 133, 95, 163,
}

var yyPact = [...]int16{
	1738, -1000, -195, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 762, 827, -1000, -1000, -1000, -1000, -1000, -1000, 601,
	7398, 37, 59, 1, 10129, 58, 1376, 10807, -1000, -17,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 549, -1000, -1000,
	-1000, -1000, -1000, 754, 760, 608, 749, 671, -1000, 5551,
	36, 8998, 9903, 4846, -1000, 473, 54, 10807, -160, 10355,
	33, 33, 33, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 56, 10807, -1000, 10807,
	19, 471, 19, 19, 19, 10807, -1000, 83, -1000, -1000,
	-1000, -1000, 10807, 470, 717, 25, 2862, 2862, 2862, 2862,
	-10, 2862, -118, 622, -1000, -1000, -1000, -1000, 2862, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 332,
	722, 6259, 6259, 762, -1000, 549, -1000, -1000, -1000, 714,
	-1000, -1000, 232, 808, -1000, 7172, 82, -1000, 6259, 1960,
	569, -1000, -1000, 569, -1000, -1000, 76, -1000, -1000, 6711,
	6711, 6711, 6711, 6711, 6711, 6711, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	569, -1000, 6024, 569, 569, 569, 569, 569, 569, 569,
	569, 6259, 569, 569, 569, 569, 569, 569, 569, 569,
	569, 569, 569, 569, 569, 9677, 502, 604, -1000, -1000,
	-1000, 744, 8085, 8772, 10807, 525, -1000, 547, 4598, -121,
	-1000, -1000, -1000, 167, 8537, -1000, -1000, -1000, 715, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 467, -1000, 1829, 459, 2862, 41, 531, 457,
	189, 438, 10807, 10807, 2862, 39, 10807, 741, 619, 10807,
	416, 414, -1000, 4350, -1000, 2862, 2862, 2862, 2862, 2862,
	2862, 2862, 2862, -1000, -1000, -1000, -1000, -1000, -1000, 2862,
	2862, -1000, -92, -1000, 10807, -1000, -1000, -1000, -1000, 821,
	135, 375, 81, 551, -1000, 406, 754, 332, 671, 8311,
	617, -1000, -1000, 10807, -1000, 6259, 6259, 329, -1000, 9450,
	-1000, -1000, 3358, 141, 6711, 219, 257, 6711, 6711, 6711,
	6711, 6711, 6711, 6711, 6711, 6711, 6711, 6711, 6711, 6711,
	6711, 6711, 318, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 412, -1000, 549, 450, 450, 98, 98, 98, 98,
	98, 98, 6937, 5081, 332, 464, 231, 6024, 5551, 5551,
	6259, 6259, 10581, 10581, 5551, 746, 174, 231, 10581, -1000,
	332, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5551, 5551,
	5551, 5551, 7, 10807, -1000, 10581, 8998, 8998, 8998, 8998,
	8998, -1000, 665, 649, -1000, 635, 633, 641, 10807, -1000,
	449, 8085, 114, 569, -1000, 9224, -1000, -1000, 7, 500,
	8998, 10807, -1000, -1000, 4102, 547, -121, 544, -1000, -134,
	-130, 5786, 89, -1000, -1000, -1000, -1000, 2614, 140, 247,
	-88, -1000, -1000, -1000, 581, -1000, 581, 581, 581, 581,
	-49, -49, -49, -49, -1000, -1000, -1000, -1000, -1000, 600,
	590, -1000, 581, 581, 581, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 588, 588, 588, 582, 582, 606,
	-1000, 10807, -179, 405, 2862, 740, 2862, -1000, 68, -1000,
	10807, -1000, -1000, 10807, 2862, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	218, -1000, -1000, -1000, -1000, 686, 6259, 6259, 3854, 6259,
	-1000, -1000, -1000, 722, -1000, 746, 761, -1000, 705, 704,
	5551, -1000, -1000, 141, 238, -1000, -1000, 274, -1000, -1000,
	-1000, -1000, 80, 569, -1000, 1977, -1000, -1000, -1000, -1000,
	219, 6711, 6711, 6711, 122, 1977, 1996, 916, 1536, 98,
	260, 260, 102, 102, 102, 102, 102, 620, 620, -1000,
	-1000, -1000, 332, -1000, -1000, -1000, 332, 5551, 545, -1000,
	-1000, 6259, -1000, 332, 444, 444, 348, 229, 542, -1000,
	79, 537, 444, 5551, 235, -1000, 6259, 332, -1000, 444,
	332, 444, 444, 472, 569, -1000, 538, -1000, 163, 604,
	587, 613, 745, -1000, -1000, -1000, -1000, 639, -1000, 636,
	-1000, -1000, -1000, -1000, -1000, 53, 47, 46, 10355, -1000,
	789, 8998, 526, -1000, -1000, 544, -121, -140, -1000, -1000,
	-1000, 231, -1000, 403, 534, 2366, -1000, -1000, -1000, -1000,
	-1000, -1000, 584, 730, 148, 137, 377, -1000, -1000, 719,
	-1000, 197, -106, -1000, -1000, 307, -49, -49, -1000, -1000,
	89, 710, 89, 89, 89, 345, 345, -1000, -1000, -1000,
	-1000, 295, -1000, -1000, -1000, 292, -1000, 611, 10355, 2862,
	-1000, 3606, -1000, -1000, -1000, -1000, -1000, -1000, 284, 207,
	184, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 6, -1000, 2862, -1000, 234, 10807, 10807, 675,
	231, 231, 75, -1000, -1000, 10807, -1000, -1000, -1000, -1000,
	535, -1000, -1000, -1000, 3110, 5551, -1000, 122, 1977, 1225,
	-1000, 6711, 6711, -1000, -1000, 444, 5551, 231, -1000, -1000,
	-1000, 217, 318, 217, 6711, 6711, 3854, 6711, 6711, -170,
	530, 170, -1000, 6259, 357, -1000, -1000, -1000, -1000, -1000,
	609, 10581, 569, -1000, 7859, 10355, 762, 10581, 6259, 6259,
	-1000, -1000, 6259, 583, -1000, 6259, -1000, -1000, -1000, 569,
	569, 569, 426, -1000, 762, 526, -1000, -1000, -1000, -136,
	-137, -1000, -1000, 2614, -1000, 2614, 10355, -1000, 364, 360,
	-1000, -1000, 605, 69, -1000, -1000, -1000, 429, 89, 89,
	-1000, 139, -1000, -1000, -1000, 442, -1000, 437, 524, 432,
	10807, -1000, -1000, 519, -1000, 162, -1000, -1000, 10355, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10355, 10807, -1000, -1000, -1000, -1000, -1000, 10355, -1000,
	-1000, 337, 6259, -1000, -1000, -1000, 3606, -1000, 789, 8998,
	-1000, -1000, 332, -1000, 6711, 1977, 1977, -1000, -1000, 332,
	581, 581, -1000, 581, 582, -1000, 581, -28, 581, -30,
	332, 332, 1859, 1739, -1000, 1562, 1418, 569, -167, -1000,
	231, 6259, -1000, 723, 483, 497, -1000, -1000, 5316, 332,
	428, 71, 426, 754, -1000, 231, 231, 231, 10355, 231,
	10355, 10355, 10355, 7633, 10355, 754, -1000, -1000, -1000, -1000,
	2366, -1000, 409, -1000, 581, -1000, -1000, -76, 812, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-49, 333, -49, 280, -1000, 265, 2862, 3606, 2614, -1000,
	570, -1000, -1000, -1000, -1000, 735, -1000, 231, 778, 509,
	-1000, 1977, -1000, -1000, 74, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6711, 6711, -1000, 6711, 6711, 6711,
	332, 331, 231, 729, -1000, 569, -1000, -1000, 529, 10355,
	10355, -1000, -1000, 400, -1000, 398, 398, 398, 114, -1000,
	-1000, 104, 10355, -1000, 127, -1000, -149, 89, -1000, 89,
	410, 394, -1000, -1000, -1000, 10355, 569, 771, 757, -1000,
	-1000, 1824, 1824, 1824, 1824, 13, -1000, -1000, 811, -1000,
	569, -1000, 549, 70, -1000, 10355, -1000, -1000, -1000, -1000,
	-1000, 104, -1000, 351, 159, 317, -1000, 245, 728, -1000,
	726, -1000, -1000, -1000, -1000, -1000, 393, 5, -1000, 6259,
	6259, -1000, -1000, -1000, -1000, 332, 50, -182, 10581, 497,
	332, 10355, -1000, -1000, -1000, 262, -1000, -1000, -1000, 313,
	-1000, -1000, 531, 369, -1000, 10355, 231, 489, -1000, 674,
	-173, -186, 469, -1000, -1000, -1000, -1000, -179, -1000, 5,
	699, -1000, 669, -1000, -1000, -1000, -2, -180, -7, -184,
	569, -188, 6485, -1000, 1824, 332, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1031, 91, 530, 1028, 1027, 1026, 1022, 1020, 1007,
	1006, 1005, 1004, 1001, 1000, 999, 998, 996, 995, 990,
	988, 987, 985, 984, 125, 983, 982, 981, 54, 980,
	55, 977, 976, 30, 230, 35, 42, 267, 975, 22,
	67, 57, 973, 40, 971, 968, 59, 967, 49, 966,
	965, 1275, 948, 946, 12, 25, 944, 942, 940, 937,
	60, 315, 936, 935, 934, 933, 932, 930, 41, 6,
	10, 15, 14, 929, 1046, 8, 928, 53, 927, 926,
	925, 924, 32, 922, 44, 921, 21, 39, 918, 9,
	52, 24, 20, 5, 64, 46, 917, 26, 47, 38,
	916, 914, 344, 904, 903, 902, 900, 899, 898, 145,
	305, 896, 893, 892, 891, 37, 170, 469, 783, 51,
	890, 889, 888, 1245, 61, 50, 18, 887, 27, 258,
	28, 884, 883, 29, 882, 881, 876, 874, 873, 872,
	871, 79, 870, 869, 868, 16, 34, 866, 864, 45,
	23, 863, 858, 857, 33, 43, 856, 36, 855, 850,
	849, 848, 19, 13, 846, 11, 844, 7, 843, 842,
	2, 841, 17, 840, 3, 839, 4, 31, 838, 837,
	0, 326, 836, 833, 95,
}

var yyR1 = [...]uint8{
	0, 178, 179, 179, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 182,
	182, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 131, 131,
	11, 11, 11, 11, 11, 11, 11, 176, 176, 175,
	174, 174, 173, 173, 172, 16, 159, 160, 160, 160,
	155, 134, 134, 134, 134, 137, 137, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 136, 136, 136,
	136, 136, 138, 138, 138, 138, 138, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 140, 140, 140, 140, 140, 140, 140, 140,
	154, 154, 141, 141, 149, 149, 150, 150, 150, 147,
	147, 148, 148, 151, 151, 151, 142, 142, 142, 142,
	142, 142, 142, 144, 144, 152, 152, 145, 145, 145,
	146, 146, 153, 153, 153, 153, 153, 143, 143, 156,
	156, 168, 168, 167, 167, 167, 158, 158, 164, 164,
	164, 164, 164, 157, 157, 166, 166, 165, 161, 161,
	161, 162, 162, 162, 163, 163, 163, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 171, 169, 169,
	170, 170, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 107, 107, 104, 104, 105, 105,
	106, 106, 106, 108, 108, 108, 132, 132, 132, 19,
	19, 21, 21, 22, 23, 20, 20, 20, 20, 20,
	183, 24, 25, 25, 26, 26, 26, 30, 30, 30,
	28, 28, 29, 29, 35, 35, 34, 34, 36, 36,
	36, 36, 120, 120, 120, 119, 119, 38, 38, 39,
	39, 40, 40, 41, 41, 41, 53, 53, 89, 89,
	91, 91, 42, 42, 42, 42, 43, 43, 44, 44,
	45, 45, 127, 127, 126, 126, 126, 125, 125, 47,
	47, 47, 49, 48, 48, 48, 48, 50, 50, 52,
	52, 51, 51, 54, 54, 54, 54, 55, 55, 37,
	37, 37, 37, 37, 37, 37, 103, 103, 57, 57,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	67, 67, 67, 67, 67, 67, 58, 58, 58, 58,
	58, 58, 58, 33, 33, 68, 68, 68, 74, 69,
	69, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 65, 65, 65, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	64, 64, 64, 64, 64, 64, 64, 64, 184, 184,
	66, 66, 66, 66, 31, 31, 31, 31, 31, 130,
	130, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 78, 78, 32, 32, 76, 76,
	77, 79, 79, 75, 75, 75, 60, 60, 60, 60,
	60, 60, 60, 60, 62, 62, 62, 80, 80, 81,
	81, 82, 82, 83, 83, 84, 85, 85, 85, 86,
	86, 86, 86, 87, 87, 87, 59, 59, 59, 59,
	59, 59, 88, 88, 88, 88, 92, 92, 70, 70,
	72, 72, 71, 73, 93, 93, 97, 94, 94, 98,
	98, 98, 96, 96, 96, 122, 122, 122, 101, 101,
	109, 109, 110, 110, 102, 102, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 112, 112, 112, 113,
	113, 114, 114, 114, 121, 121, 117, 117, 118, 118,
	123, 123, 124, 124, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 180, 181, 128,
	129, 129, 129,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 8, 4, 6, 5, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 1, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 2, 0, 3, 0, 1, 0, 3, 3,
	0, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	6, 8, 8, 6, 8, 8, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -178, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 140, 116, 133, 49, 152, 153,
	155, 156, 25, 134, 135, 138, 139, -180, 8, 238,
	53, -179, 253, -82, 15, -26, 5, -24, -183, -24,
	-24, -24, -24, -24, -159, 53, -114, 121, 70, 148,
	230, 118, 119, 125, -117, 56, -116, 246, 152, 163,
	157, 187, 179, 177, 180, 217, 65, 155, 226, 136,
	175, 171, 169, 27, 192, 251, 170, 131, 130, 193,
	197, 218, 161, 162, 220, 191, 132, 32, 248, 34,
	144, 221, 195, 190, 186, 189, 160, 185, 38, 199,
	198, 200, 216, 182, 172, 18, 224, 139, 142, 194,
	196, 126, 146, 250, 222, 168, 143, 138, 225, 156,
	219, 228, 37, 204, 159, 165, 166, 167, 129, 153,
	150, 183, 145, 173, 174, 188, 158, 184, 154, 147,
	140, 227, 205, 252, 181, 178, 151, 149, 209, 210,
	211, 212, 249, 223, 176, 206, -102, 121, 123, 119,
	119, 120, 121, 230, 118, 119, -51, -123, 56, -116,
	121, 148, 119, 106, 180, 112, 207, 120, 32, 146,
	-132, 119, -104, 149, 209, 210, 211, 212, 56, 219,
	218, 213, -123, 154, -128, -128, -128, -128, -128, -2,
	-86, 17, 16, -5, -3, -180, 6, 20, 21, -30,
	39, 40, -25, -36, 97, -37, -123, -56, 72, -61,
	29, 56, -116, 23, -60, -57, -75, -73, -74, 106,
	107, 95, 96, 103, 73, 108, -65, -63, -64, -66,
	58, 57, 66, 59, 60, 61, 62, 67, 68, 69,
	-117, -71, -180, 43, 44, 239, 240, 241, 242, 245,
	243, 75, 33, 229, 237, 236, 235, 233, 234, 231,
	232, 124, 230, 101, 238, -102, -39, -40, -41, -42,
	-53, -74, -180, -51, 11, -46, -51, -94, -131, 154,
	-98, 219, 218, -118, -96, -117, -115, 217, 180, 216,
	117, 71, 22, 24, 202, 74, 106, 16, 75, 105,
	239, 112, 47, 231, 232, 229, 241, 242, 230, 207,
	29, 10, 25, 134, 21, 99, 114, 78, 79, 137,
	23, 135, 69, 19, 50, 11, 13, 14, 124, 123,
	90, 120, 45, 8, 108, 26, 87, 41, 28, 43,
	88, 17, 233, 234, 31, 245, 141, 101, 48, 35,
	72, 67, 51, 70, 15, 46, 89, 115, 238, 44,
	118, 6, 244, 30, 133, 42, 119, 208, 77, 122,
	68, 5, 125, 9, 49, 52, 235, 236, 237, 33,
	76, 12, -160, -155, 56, 120, -51, 238, -117, -110,
	124, -110, -110, 119, -51, -51, -109, 124, 56, -109,
	-109, -109, -51, 109, -51, 56, 30, 230, 56, 146,
	119, 147, 121, -129, -180, -118, -129, -129, -129, 150,
	151, -129, -105, 214, 51, -129, -181, 55, -87, 19,
	31, -37, -123, -83, -84, -37, -82, -2, -24, 35,
	-28, 21, 64, 11, -120, 71, 70, 87, -119, 22,
	-117, 58, 109, -37, -58, 90, 72, 88, 89, 74,
	92, 91, 102, 95, 96, 97, 98, 99, 100, 101,
	93, 94, 105, 80, 81, 82, 83, 84, 85, 86,
	-103, -180, -74, -180, 110, 111, -61, -61, -61, -61,
	-61, -61, -61, -180, -2, -69, -37, -180, -180, -180,
	-180, -180, -180, -180, -180, -180, -78, -37, -180, -184,
	-180, -184, -184, -184, -184, -184, -184, -184, -180, -180,
	-180, -180, -52, 26, -51, 30, 54, -47, -49, -48,
	-50, 41, 45, 47, 42, 43, 44, 48, -127, 22,
	-39, -180, -126, 142, -125, 22, -123, 58, -51, -46,
	-182, 54, 11, 52, 54, -94, 154, -95, -99, 220,
	222, 80, -122, -117, 58, 29, 30, 55, 54, -134,
	-137, -139, -138, -140, -135, -136, 177, 178, 106, 181,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	30, 136, 173, 174, 175, 176, 193, 194, 195, 196,
	197, 198, 199, 200, 157, 158, 159, 165, 166, 167,
	160, 161, 162, 163, 168, 169, 170, 171, 172, 56,
	-129, 121, -176, 52, 56, 72, 56, -51, -51, -129,
	122, -51, 23, 51, -51, 56, 56, -124, -123, -115,
	-129, -129, -129, -129, -129, -129, -129, -129, -129, -129,
	-107, 208, 215, -51, 9, 90, 54, 18, 109, 54,
	-85, 24, 25, -86, -181, -30, -62, -117, 59, 62,
	-29, 42, -51, -37, -37, -67, 67, 72, 68, 69,
	-119, 97, -124, -118, -115, -61, -68, -71, -74, 63,
	90, 88, 89, 74, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -130,
	56, 58, 56, -60, -60, -117, -35, 21, -34, -36,
	-181, 54, -181, -2, -34, -34, -37, -37, -75, -117,
	-123, -75, -34, -28, -76, -77, 76, -75, -181, -34,
	-35, -34, -34, -90, 142, -51, -93, -97, -75, -40,
	-41, -41, -40, -41, 41, 41, 41, 46, 41, 46,
	41, -48, -123, -181, -54, 49, 123, 50, -180, -125,
	-90, 52, -39, -51, -98, -95, 54, 221, 223, 224,
	51, -37, -146, 105, -161, -162, -163, -118, 58, 59,
	-155, -156, -164, 126, 129, 125, -157, 120, 28, -151,
	67, 72, -147, 205, -141, 53, -141, -141, -141, -141,
	-145, 180, -145, -145, -145, 53, 53, -141, -141, -141,
	-149, 53, -149, -149, -150, 53, -150, -121, 52, -51,
	-174, 249, -175, 56, -129, 23, -129, -111, 117, 114,
	115, -171, 113, 202, 180, 65, 29, 15, 239, 142,
	252, 56, 143, -51, -51, -129, -106, 11, 90, 37,
	-37, -37, -124, -84, -87, -101, 19, 11, 33, 33,
	-34, 67, 68, 69, 109, -180, -68, -61, -61, -61,
	-33, 137, 71, -181, -181, -34, 54, -37, -181, -181,
	-181, 54, 52, 22, 54, 11, 109, 54, 11, -181,
	-34, -79, -77, 78, -37, -181, -181, -181, -181, -181,
	-59, 30, 33, -2, -180, -180, -55, 54, 12, 80,
	-44, -43, 51, 52, -45, 51, -43, 41, 41, 120,
	120, 120, -91, -117, -55, -39, -55, -99, -100, 225,
	222, 228, 56, 54, -163, 80, 53, 28, -157, -157,
	56, 56, -142, 29, 67, -148, 206, 59, -145, -145,
	-146, 30, -146, -146, -146, -154, 58, -154, 59, 59,
	51, -117, -129, -173, -172, -118, -128, -177, 148, 127,
	128, 131, 130, 56, 120, 28, 126, 129, 142, 125,
	-177, 148, -112, -113, 122, 22, 120, 28, 142, -129,
	-108, 88, 12, -123, -123, 38, 109, -51, -38, 11,
	97, -118, -35, -33, 71, -61, -61, -181, -36, -133,
	106, 177, 136, 175, 171, 191, 182, 204, 173, 205,
	-130, -133, -61, -61, -118, -61, -61, 246, -82, 79,
	-37, 77, -92, 51, -93, -70, -72, -71, -180, -2,
	-88, -117, -91, -82, -97, -37, -37, -37, 53, -37,
	-180, -180, -180, -181, 54, -82, -55, 222, 226, 227,
	-162, -163, -166, -165, -117, 56, 56, -144, 51, 58,
	59, 60, 67, 229, 66, 55, -146, -146, 56, 106,
	55, 54, 55, 54, 55, 54, -51, 54, 80, -128,
	-117, -128, -117, -51, -128, -117, 58, -37, -55, -39,
	-181, -61, -181, -141, -141, -141, -150, -141, 162, -141,
	162, -181, -181, -181, 54, 19, -181, 54, 19, -180,
	-32, 244, -37, 27, -92, 54, -181, -181, -181, 54,
	109, -181, -86, -89, -117, -89, -89, -89, -126, -117,
	-86, 55, 54, -141, -152, 202, 9, -145, 58, -145,
	59, 59, -129, -172, -163, 53, 26, -80, 13, -145,
	56, -61, -61, -61, -61, -61, -181, 58, 28, -72,
	33, -2, -180, -117, -117, 54, 55, -181, -181, -181,
	-54, -168, -167, 52, 132, 65, -165, -153, 126, 28,
	125, 229, -146, -146, 55, 55, -89, -180, -81, 14,
	16, -181, -181, -181, -181, -31, 90, 249, 9, -70,
	-2, 109, -117, -167, 56, -158, 80, 58, -143, 65,
	28, 28, 55, -169, -170, 142, -37, -69, -181, 247,
	48, 250, -93, -181, -117, 59, 58, -176, -181, 54,
	-117, 38, 248, 251, -174, -170, 33, 38, 144, 249,
	145, 250, -180, 251, -61, 141, -181, -181,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 511, 0, 280, 280, 280, 280, 280, 280, 0,
	581, 564, 0, 0, 0, 0, -2, 270, 271, 0,
	273, 274, 789, 789, 789, 789, 789, 0, 33, 34,
	787, 1, 3, 519, 0, 0, 284, 287, 282, 0,
	564, 0, 0, 0, 60, 0, 0, 776, 0, 777,
	562, 562, 562, 582, 583, 586, 587, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 0, 0, 565, 0,
	560, 0, 560, 560, 560, 0, 229, 351, 590, 591,
	776, 777, 0, 0, 0, 0, 790, 790, 790, 790,
	0, 790, 258, 247, 249, 250, 251, 252, 790, 267,
	268, 257, 269, 272, 275, 276, 277, 278, 279, 27,
	523, 0, 0, 511, 29, 0, 280, 285, 286, 290,
	288, 289, 281, 0, 298, 302, 0, 359, 0, 364,
	366, -2, -2, 0, 401, 402, 403, 404, 405, 0,
	0, 0, 0, 0, 0, 0, 428, 429, 430, 431,
	496, 497, 498, 499, 500, 501, 502, 503, 368, 369,
	493, 543, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 484, 0, 458, 458, 458, 458, 458, 458, 458,
	458, 0, 0, 0, 0, 0, 0, 309, 311, 312,
	313, 332, 0, 334, 0, 0, 41, 45, 0, 767,
	547, -2, -2, 0, 0, 588, 589, -2, 693, -2,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 0, 77, 0, 0, 790, 0, 67, 0,
	0, 0, 0, 0, 790, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 230, 790, 790, 790, 790, 790,
	790, 790, 790, 239, 791, 792, 240, 241, 242, 790,
	790, 244, 0, 259, 0, 253, 28, 788, 22, 0,
	0, 520, 0, 512, 513, 516, 519, 27, 287, 0,
	292, 291, 283, 0, 299, 0, 0, 0, 303, 0,
	305, 306, 0, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 386, 387, 388, 389, 390, 391, 392,
	365, 0, 379, 0, 0, 0, 421, 422, 423, 424,
	425, 426, 0, 294, 27, 0, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 0, 485, 0, 450,
	0, 451, 452, 453, 454, 455, 456, 457, 0, 294,
	0, 0, 43, 0, 350, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 342, 0, 0, 0, 0, 333,
	0, 0, 353, 737, 335, 0, 337, 338, -2, 0,
	0, 0, 39, 40, 0, 46, 767, 48, 49, 0,
	0, 0, 160, 555, 556, 557, 553, 188, 0, 143,
	139, 82, 83, 84, 132, 86, 132, 132, 132, 132,
	157, 157, 157, 157, 115, 116, 117, 118, 119, 0,
	0, 102, 132, 132, 132, 106, 122, 123, 124, 125,
	126, 127, 128, 129, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 134, 134, 134, 136, 136, 584,
	62, 0, 70, 0, 790, 0, 790, 75, 0, 204,
	0, 223, 561, 0, 790, 226, 227, 352, 592, 593,
	231, 232, 233, 234, 235, 236, 237, 238, 243, 246,
	260, 254, 255, 248, 524, 0, 0, 0, 0, 0,
	515, 517, 518, 523, 30, 290, 0, 504, 0, 0,
	0, 293, 25, 360, 361, 363, 380, 0, 382, 384,
	304, 300, 0, 494, -2, 370, 371, 395, 396, 397,
	0, 0, 0, 0, 393, 375, 0, 406, 407, 408,
	409, 410, 411, 412, 413, 414, 415, 416, 417, 420,
	469, 470, 0, 418, 419, 427, 0, 0, 295, 296,
	398, 0, 542, 27, 0, 0, 0, 0, 0, 493,
	0, 0, 0, 0, 491, 488, 0, 0, 459, 0,
	0, 0, 0, 0, 0, 349, 357, 544, 0, 310,
	328, 330, 0, 325, 340, 341, 343, 0, 345, 0,
	347, 348, 314, 315, 316, 0, 0, 0, 0, 336,
	357, 0, 357, 42, 548, 47, 0, 0, 52, 53,
	549, 550, 551, 0, 76, 189, 191, 194, 195, 196,
	78, 79, 0, 0, 0, 0, 0, 183, 184, 146,
	144, 0, 141, 140, 85, 0, 157, 157, 109, 110,
	160, 0, 160, 160, 160, 0, 0, 103, 104, 105,
	97, 0, 98, 99, 100, 0, 101, 0, 0, 790,
	64, 0, 68, 69, 65, 563, 66, 789, 0, 0,
	576, 205, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 0, 222, 790, 225, 263, 0, 0, 0,
	521, 522, 0, 514, 23, 0, 558, 559, 505, 506,
	307, 381, 383, 385, 0, 294, 372, 393, 376, 0,
	373, 0, 0, 367, 432, 0, 0, 400, -2, 435,
	436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 0, 489, 0, 0, 449, 460, 461, 462, 463,
	536, 0, 0, -2, 0, 0, 511, 0, 0, 0,
	322, 329, 0, 0, 323, 0, 324, 344, 346, 0,
	0, 0, 0, 320, 511, 357, 38, 50, 51, 0,
	0, 57, 161, 0, 192, 0, 0, 178, 0, 0,
	181, 182, 153, 0, 145, 81, 142, 0, 160, 160,
	111, 0, 112, 113, 114, 0, 130, 0, 0, 0,
	0, 585, 63, 71, 72, 0, 197, 789, 0, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	789, 0, 0, 789, 577, 578, 579, 580, 0, 224,
	245, 0, 0, 261, 262, 525, 0, 24, 357, 0,
	301, 495, 0, 374, 0, 394, 377, 433, 297, 0,
	132, 132, 474, 132, 136, 477, 132, 479, 132, 482,
	0, 0, 0, 0, 494, 0, 0, 0, 486, 448,
	492, 0, 31, 0, 536, 526, 538, 540, 0, 27,
	0, 532, 0, 519, 545, 358, 546, 326, 0, 331,
	0, 0, 0, 334, 0, 519, 37, 54, 55, 56,
	190, 193, 0, 185, 132, 179, 180, 155, 0, 147,
	148, 149, 150, 151, 152, 133, 107, 108, 158, 159,
	157, 0, 157, 0, 137, 0, 790, 0, 0, 198,
	0, 199, 201, 202, 203, 0, 264, 265, 507, 308,
	434, 378, 437, 471, 157, 475, 476, 478, 480, 481,
	483, 439, 438, 440, 0, 0, 443, 0, 0, 0,
	0, 0, 490, 0, 32, 0, 541, -2, 0, 0,
	0, 44, 35, 0, 318, 0, 0, 0, 353, 321,
	36, 170, 0, 187, 162, 156, 0, 160, 131, 160,
	0, 0, 61, 73, 74, 0, 0, 509, 0, 472,
	473, 0, 0, 0, 0, 464, 447, 487, 0, 539,
	0, -2, 0, 534, 533, 0, 327, 354, 355, 356,
	317, 169, 171, 0, 176, 0, 186, 167, 0, 164,
	166, 154, 120, 121, 135, 138, 0, 0, 26, 0,
	0, 441, 442, 444, 445, 0, 0, 0, 0, 529,
	27, 0, 319, 172, 173, 0, 177, 175, 80, 0,
	163, 165, 67, 0, 218, 0, 510, 508, 446, 0,
	0, 0, 537, -2, 535, 174, 168, 70, 217, 0,
	0, 465, 0, 468, 200, 219, 0, 466, 0, 0,
	0, 0, 0, 467, 0, 0, 220, 221,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 253,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:303
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:308
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:309
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:313
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:336
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:344
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:348
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:354
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:361
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:367
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:371
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:377
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:381
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:388
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:400
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:412
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:416
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:422
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:428
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:432
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:436
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:441
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:442
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:446
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:450
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:455
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:459
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:465
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:469
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:473
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:483
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:487
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:493
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:497
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:501
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:507
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:525
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:529
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:535
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:540
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:545
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:549
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:553
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:561
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:565
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:570
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:574
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:580
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:585
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:590
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:596
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:601
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:607
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:613
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:620
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:627
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:632
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:636
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:642
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:653
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:664
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:669
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:711
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:723
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:873
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:878
		{
			yyVAL.optVal = nil
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:882
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:887
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:891
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:899
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:903
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:909
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:917
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:921
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:926
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:930
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:936
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:940
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:944
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:949
		{
			yyVAL.optVal = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:953
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:957
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:961
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:965
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:969
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:973
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:978
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:982
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:987
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:996
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1000
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1004
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1009
		{
			yyVAL.str = ""
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1013
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1018
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1022
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1026
		{
			yyVAL.colKeyOpt = colKey
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1030
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1034
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1039
		{
			yyVAL.optVal = nil
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1043
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1049
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1053
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1059
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1063
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1069
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1073
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1078
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1084
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1088
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1098
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1102
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1106
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1110
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1116
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1120
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1126
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1130
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1136
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1141
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1149
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1157
		{
			yyVAL.str = yyDollar[1].str
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1161
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1165
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1171
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1175
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1179
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1185
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1189
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1193
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1197
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1210
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1220
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1225
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1230
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1234
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1253
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1259
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1263
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 220:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1269
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 221:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1273
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1279
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1285
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1293
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1298
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1306
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1310
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1316
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1320
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1325
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1331
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1335
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1339
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1352
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1356
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1360
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1364
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1368
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1372
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1380
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1388
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1398
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1422
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1432
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1438
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1442
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1448
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1452
		{
			yyVAL.str = "extended "
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1458
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1462
		{
			yyVAL.str = "full "
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1468
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1472
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1476
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1482
		{
			yyVAL.showFilter = nil
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1486
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1490
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1496
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1500
		{
			yyVAL.str = SessionStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1504
		{
			yyVAL.str = GlobalStr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1520
		{
			yyVAL.statement = &Begin{}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1524
		{
			yyVAL.statement = &Begin{}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &Commit{}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1536
		{
			yyVAL.statement = &Rollback{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &OtherRead{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &OtherRead{}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1563
		{
			setAllowComments(yylex, true)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1567
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1573
		{
			yyVAL.bytes2 = nil
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1577
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1583
		{
			yyVAL.str = UnionStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1587
		{
			yyVAL.str = UnionAllStr
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1591
		{
			yyVAL.str = UnionDistinctStr
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1596
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1600
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1604
		{
			yyVAL.str = SQLCacheStr
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1609
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.str = DistinctStr
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1618
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1622
		{
			yyVAL.str = StraightJoinHint
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1627
		{
			yyVAL.selectExprs = nil
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1631
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1637
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1641
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1647
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1651
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1655
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1659
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1664
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1668
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1672
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1679
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1684
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1688
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1694
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1698
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1708
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1712
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1716
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1722
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1726
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1732
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1736
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1742
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1746
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1759
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1763
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1767
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1771
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1777
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1779
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1783
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1785
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1789
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1791
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1794
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1796
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1799
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1803
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1807
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1814
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1820
		{
			yyVAL.str = JoinStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1824
		{
			yyVAL.str = JoinStr
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1828
		{
			yyVAL.str = JoinStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.str = StraightJoinStr
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1840
		{
			yyVAL.str = LeftJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1844
		{
			yyVAL.str = LeftJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1848
		{
			yyVAL.str = RightJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1852
		{
			yyVAL.str = RightJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1858
		{
			yyVAL.str = NaturalJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1862
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1872
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1876
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1882
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1886
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1891
		{
			yyVAL.indexHints = nil
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1895
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1899
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1903
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1908
		{
			yyVAL.expr = nil
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1912
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1918
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1922
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1926
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1930
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1934
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1938
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1942
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1948
		{
			yyVAL.str = ""
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1952
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1958
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1968
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1972
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1976
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1980
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1984
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1988
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1992
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1996
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 378:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2000
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2004
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2010
		{
			yyVAL.str = IsNullStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2014
		{
			yyVAL.str = IsNotNullStr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2018
		{
			yyVAL.str = IsTrueStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2022
		{
			yyVAL.str = IsNotTrueStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2026
		{
			yyVAL.str = IsFalseStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2030
		{
			yyVAL.str = IsNotFalseStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2036
		{
			yyVAL.str = EqualStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2040
		{
			yyVAL.str = LessThanStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.str = GreaterThanStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.str = LessEqualStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.str = GreaterEqualStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = NotEqualStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2060
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2065
		{
			yyVAL.expr = nil
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2069
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2079
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2083
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2089
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2099
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2105
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2109
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2113
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2117
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2121
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2125
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2129
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2141
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2145
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2149
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2153
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2157
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2161
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2165
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2169
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2181
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2193
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2201
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2215
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2219
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2223
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2241
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2245
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 434:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2249
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2259
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2263
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2267
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 438:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2271
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2275
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2279
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 441:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2283
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 442:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2287
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2291
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 444:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2295
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 445:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2299
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 446:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2303
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 447:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2307
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2311
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2315
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2325
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2329
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2333
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2337
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2347
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2357
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2389
		{
			yyVAL.str = ""
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2393
		{
			yyVAL.str = BooleanModeStr
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2397
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2401
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2405
		{
			yyVAL.str = QueryExpansionStr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2411
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2421
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2425
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2429
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2437
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2441
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2447
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2455
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2459
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2463
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2467
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2471
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2476
		{
			yyVAL.expr = nil
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2480
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2485
		{
			yyVAL.str = string("")
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2489
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2495
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2505
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2510
		{
			yyVAL.expr = nil
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2514
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2520
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2524
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2528
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2562
		{
			yyVAL.expr = &NullVal{}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2568
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2586
		{
			yyVAL.exprs = nil
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2590
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = nil
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2604
		{
			yyVAL.orderBy = nil
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2608
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2614
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2618
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2624
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2629
		{
			yyVAL.str = AscScr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2633
		{
			yyVAL.str = AscScr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2637
		{
			yyVAL.str = DescScr
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2642
		{
			yyVAL.limit = nil
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2646
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2650
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2654
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2659
		{
			yyVAL.str = ""
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2663
		{
			yyVAL.str = ForUpdateStr
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2667
		{
			yyVAL.str = ShareModeStr
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2680
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2684
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2688
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2693
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2697
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 531:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2701
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2708
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2712
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2716
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2720
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2725
		{
			yyVAL.updateExprs = nil
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2729
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2735
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2739
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2745
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2749
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2755
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2771
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2775
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2781
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2787
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2791
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2797
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2801
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2805
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2812
		{
			yyVAL.bytes = []byte("charset")
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2823
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2827
		{
			yyVAL.expr = &Default{}
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2836
		{
			yyVAL.byt = 0
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2838
		{
			yyVAL.byt = 1
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2841
		{
			yyVAL.empty = struct{}{}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2843
		{
			yyVAL.empty = struct{}{}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2846
		{
			yyVAL.str = ""
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2848
		{
			yyVAL.str = IgnoreStr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2852
		{
			yyVAL.empty = struct{}{}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2854
		{
			yyVAL.empty = struct{}{}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2856
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2858
		{
			yyVAL.empty = struct{}{}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2860
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2862
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2864
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2866
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2868
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2870
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2873
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2875
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2877
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2881
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2883
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2886
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2888
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2890
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2893
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2895
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2899
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2903
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2916
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2927
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3155
		{
			decNesting(yylex)
		}
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3160
		{
			forceEOF(yylex)
		}
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3165
		{
			forceEOF(yylex)
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3169
		{
			forceEOF(yylex)
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3173
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
