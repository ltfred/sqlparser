// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const UNIQUE = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const SHOW = 57458
const DESCRIBE = 57459
const EXPLAIN = 57460
const DATE = 57461
const ESCAPE = 57462
const REPAIR = 57463
const OPTIMIZE = 57464
const TRUNCATE = 57465
const MAXVALUE = 57466
const PARTITION = 57467
const REORGANIZE = 57468
const LESS = 57469
const THAN = 57470
const PROCEDURE = 57471
const TRIGGER = 57472
const VINDEX = 57473
const VINDEXES = 57474
const STATUS = 57475
const VARIABLES = 57476
const BEGIN = 57477
const START = 57478
const TRANSACTION = 57479
const COMMIT = 57480
const ROLLBACK = 57481
const BIT = 57482
const TINYINT = 57483
const SMALLINT = 57484
const MEDIUMINT = 57485
const INT = 57486
const INTEGER = 57487
const BIGINT = 57488
const INTNUM = 57489
const SMALLSERIAL = 57490
const SERIAL = 57491
const BIGSERIAL = 57492
const BOOL = 57493
const BOOLEAN = 57494
const REAL = 57495
const DOUBLE = 57496
const FLOAT_TYPE = 57497
const DECIMAL = 57498
const NUMERIC = 57499
const TIME = 57500
const TIMESTAMP = 57501
const DATETIME = 57502
const YEAR = 57503
const CHAR = 57504
const VARCHAR = 57505
const CHARACTER = 57506
const VARBINARY = 57507
const NCHAR = 57508
const TEXT = 57509
const TINYTEXT = 57510
const MEDIUMTEXT = 57511
const LONGTEXT = 57512
const BLOB = 57513
const TINYBLOB = 57514
const MEDIUMBLOB = 57515
const LONGBLOB = 57516
const JSON = 57517
const ENUM = 57518
const GEOMETRY = 57519
const POINT = 57520
const LINESTRING = 57521
const POLYGON = 57522
const GEOMETRYCOLLECTION = 57523
const MULTIPOINT = 57524
const MULTILINESTRING = 57525
const MULTIPOLYGON = 57526
const NULLX = 57527
const AUTO_INCREMENT = 57528
const APPROXNUM = 57529
const SIGNED = 57530
const UNSIGNED = 57531
const ZEROFILL = 57532
const DATABASES = 57533
const TABLES = 57534
const VITESS_KEYSPACES = 57535
const VITESS_SHARDS = 57536
const VITESS_TABLETS = 57537
const VSCHEMA_TABLES = 57538
const EXTENDED = 57539
const FULL = 57540
const PROCESSLIST = 57541
const NAMES = 57542
const CHARSET = 57543
const GLOBAL = 57544
const SESSION = 57545
const ISOLATION = 57546
const LEVEL = 57547
const READ = 57548
const WRITE = 57549
const ONLY = 57550
const REPEATABLE = 57551
const COMMITTED = 57552
const UNCOMMITTED = 57553
const SERIALIZABLE = 57554
const CURRENT_TIMESTAMP = 57555
const DATABASE = 57556
const CURRENT_DATE = 57557
const CURRENT_TIME = 57558
const LOCALTIME = 57559
const LOCALTIMESTAMP = 57560
const UTC_DATE = 57561
const UTC_TIME = 57562
const UTC_TIMESTAMP = 57563
const REPLACE = 57564
const CONVERT = 57565
const CAST = 57566
const SUBSTR = 57567
const SUBSTRING = 57568
const GROUP_CONCAT = 57569
const SEPARATOR = 57570
const MATCH = 57571
const AGAINST = 57572
const LANGUAGE = 57573
const WITH = 57574
const QUERY = 57575
const EXPANSION = 57576
const UNUSED = 57577

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"SMALLSERIAL",
	"SERIAL",
	"BIGSERIAL",
	"BOOL",
	"BOOLEAN",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	150, 268,
	151, 268,
	-2, 258,
	-1, 242,
	109, 592,
	-2, 588,
	-1, 243,
	109, 593,
	-2, 589,
	-1, 312,
	80, 750,
	-2, 58,
	-1, 313,
	80, 711,
	-2, 59,
	-1, 318,
	80, 695,
	-2, 554,
	-1, 320,
	80, 732,
	-2, 556,
	-1, 579,
	52, 41,
	54, 41,
	-2, 43,
	-1, 717,
	109, 595,
	-2, 591,
	-1, 921,
	5, 28,
	-2, 400,
	-1, 946,
	5, 27,
	-2, 529,
	-1, 1170,
	5, 28,
	-2, 530,
	-1, 1214,
	5, 27,
	-2, 532,
	-1, 1276,
	5, 28,
	-2, 533,
}

const yyPrivate = 57344

const yyLast = 10971

var yyAct = [...]int16{
	273, 47, 1267, 526, 655, 863, 272, 1225, 1078, 1106,
	779, 1176, 797, 1079, 815, 573, 1007, 446, 819, 1075,
	215, 221, 857, 571, 818, 780, 949, 1052, 965, 752,
	444, 954, 53, 1010, 913, 589, 742, 998, 843, 768,
	317, 719, 459, 465, 560, 479, 414, 853, 47, 311,
	245, 895, 230, 308, 306, 540, 226, 298, 52, 588,
	1296, 829, 303, 1286, 216, 217, 218, 219, 776, 837,
	471, 749, 575, 1294, 1274, 1292, 864, 1285, 1070, 1164,
	880, 314, 418, 57, 973, 297, 1234, 972, 1100, 234,
	974, 525, 3, 810, 879, 1112, 1113, 1114, 240, 185,
	181, 182, 183, 1117, 1115, 247, 1101, 1102, 59, 60,
	61, 62, 63, 299, 811, 812, 590, 684, 591, 454,
	989, 884, 836, 1188, 685, 439, 1203, 844, 1153, 427,
	878, 1273, 1151, 214, 450, 451, 1293, 1291, 1268, 220,
	1249, 492, 491, 501, 502, 494, 495, 496, 497, 498,
	499, 500, 493, 1031, 777, 503, 428, 1226, 492, 491,
	501, 502, 494, 495, 496, 497, 498, 499, 500, 493,
	1228, 421, 503, 1232, 178, 179, 179, 663, 875, 872,
	873, 831, 871, 654, 964, 457, 243, 424, 441, 1254,
	443, 798, 800, 963, 962, 416, 193, 180, 445, 445,
	445, 445, 1173, 445, 914, 831, 1039, 882, 885, 983,
	445, 929, 184, 515, 516, 440, 442, 76, 907, 691,
	483, 190, 1028, 434, 190, 816, 503, 47, 1030, 447,
	448, 449, 831, 452, 688, 478, 1259, 1227, 493, 1053,
	456, 503, 512, 1035, 890, 514, 877, 726, 190, 190,
	76, 844, 1272, 1121, 190, 1131, 76, 467, 952, 592,
	415, 724, 725, 723, 1072, 799, 769, 1116, 876, 1055,
	1233, 1231, 524, 830, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 926, 539, 541, 541, 541, 541, 541,
	541, 541, 541, 549, 550, 551, 552, 830, 658, 1250,
	438, 987, 1262, 1122, 572, 881, 1057, 1018, 1061, 473,
	1056, 469, 1054, 430, 431, 432, 1059, 883, 468, 1034,
	1029, 476, 1027, 891, 830, 1058, 1278, 314, 420, 828,
	826, 477, 476, 827, 769, 1016, 936, 478, 1060, 1062,
	249, 542, 543, 544, 545, 546, 547, 548, 478, 517,
	518, 519, 520, 521, 522, 523, 709, 711, 712, 833,
	580, 710, 1194, 586, 834, 190, 1193, 190, 694, 695,
	1002, 477, 476, 190, 496, 497, 498, 499, 500, 493,
	190, 743, 503, 744, 76, 76, 76, 76, 478, 76,
	904, 905, 906, 925, 690, 924, 76, 177, 1001, 1017,
	422, 423, 302, 50, 1022, 1019, 1012, 1013, 1020, 1015,
	1014, 477, 476, 722, 477, 476, 990, 1279, 445, 1260,
	1210, 1021, 1191, 76, 1139, 999, 445, 1024, 478, 1257,
	689, 478, 458, 271, 1282, 458, 1238, 445, 445, 445,
	445, 445, 445, 445, 445, 1237, 477, 476, 653, 1018,
	1109, 445, 445, 1218, 1265, 1118, 662, 1108, 296, 477,
	476, 1218, 458, 478, 74, 984, 1074, 673, 674, 675,
	676, 677, 678, 679, 680, 672, 478, 1016, 1218, 1219,
	950, 681, 682, 190, 1185, 1184, 670, 1097, 458, 696,
	190, 190, 190, 720, 1172, 458, 76, 316, 1128, 1127,
	21, 716, 76, 419, 491, 501, 502, 494, 495, 496,
	497, 498, 499, 500, 493, 47, 975, 503, 1124, 1125,
	1124, 1123, 698, 866, 717, 745, 713, 919, 458, 528,
	23, 557, 458, 754, 458, 715, 669, 668, 659, 657,
	652, 1017, 599, 598, 951, 436, 1022, 1019, 1012, 1013,
	1020, 1015, 1014, 429, 944, 415, 225, 945, 303, 303,
	303, 303, 303, 1021, 754, 583, 746, 747, 1076, 1011,
	54, 950, 804, 572, 582, 801, 1042, 50, 704, 1168,
	557, 1130, 303, 1126, 718, 513, 557, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 751, 314, 76, 805, 584, 766, 582, 919,
	190, 190, 76, 794, 190, 782, 820, 190, 785, 919,
	756, 190, 773, 76, 76, 76, 76, 76, 76, 76,
	76, 316, 316, 316, 316, 807, 316, 76, 76, 761,
	764, 236, 190, 316, 302, 770, 823, 808, 803, 802,
	976, 845, 846, 847, 697, 23, 931, 76, 445, 951,
	445, 190, 781, 809, 756, 928, 919, 76, 445, 585,
	481, 692, 783, 784, 859, 786, 556, 839, 840, 841,
	842, 50, 262, 261, 264, 265, 266, 267, 867, 1198,
	869, 263, 268, 850, 851, 852, 855, 856, 888, 930,
	557, 950, 50, 838, 858, 227, 23, 656, 927, 716,
	76, 753, 755, 1091, 979, 955, 956, 908, 494, 495,
	496, 497, 498, 499, 500, 493, 854, 771, 503, 849,
	720, 848, 717, 1213, 65, 861, 896, 1111, 1076, 897,
	1003, 190, 958, 316, 190, 190, 190, 190, 190, 594,
	1160, 458, 50, 50, 666, 455, 190, 796, 961, 190,
	960, 791, 789, 190, 788, 909, 792, 790, 190, 190,
	787, 793, 76, 566, 567, 231, 232, 947, 948, 1290,
	1284, 1038, 892, 1289, 902, 76, 472, 492, 491, 501,
	502, 494, 495, 496, 497, 498, 499, 500, 493, 901,
	470, 503, 994, 597, 460, 303, 437, 935, 562, 565,
	566, 567, 563, 986, 564, 568, 461, 959, 955, 956,
	1264, 1263, 1211, 910, 911, 912, 980, 721, 968, 1166,
	967, 1199, 969, 868, 665, 570, 820, 977, 228, 229,
	472, 190, 222, 1243, 76, 970, 76, 900, 223, 54,
	190, 316, 1242, 190, 76, 899, 1201, 951, 993, 316,
	995, 996, 997, 445, 462, 466, 474, 1251, 946, 1189,
	316, 316, 316, 316, 316, 316, 316, 316, 991, 992,
	687, 484, 1008, 56, 316, 316, 58, 1000, 445, 981,
	982, 1009, 581, 1005, 51, 1, 865, 1006, 302, 302,
	302, 302, 302, 874, 700, 1266, 1023, 1224, 1105, 825,
	817, 413, 64, 302, 481, 527, 1258, 316, 1032, 824,
	1230, 1187, 302, 832, 538, 1044, 562, 565, 566, 567,
	563, 916, 564, 568, 988, 917, 835, 1110, 1261, 985,
	604, 602, 921, 922, 923, 1046, 1081, 1067, 47, 1051,
	603, 932, 1080, 601, 1064, 1077, 938, 748, 939, 940,
	941, 942, 1063, 1093, 1094, 1095, 1071, 762, 762, 606,
	717, 605, 600, 762, 201, 309, 1087, 1085, 569, 593,
	1045, 860, 1086, 475, 66, 1026, 1025, 870, 76, 1033,
	762, 190, 683, 889, 820, 1099, 820, 1104, 453, 203,
	1098, 1103, 511, 898, 971, 76, 1119, 1120, 315, 1083,
	693, 464, 1241, 1048, 1049, 1200, 934, 537, 767, 316,
	248, 708, 260, 257, 259, 258, 1065, 1066, 699, 1068,
	1069, 1132, 316, 943, 485, 246, 238, 301, 553, 1082,
	561, 559, 558, 303, 1134, 957, 304, 1137, 76, 76,
	781, 76, 953, 300, 1041, 1163, 781, 1044, 1248, 703,
	25, 55, 233, 19, 721, 18, 1142, 17, 1141, 20,
	16, 1162, 15, 14, 76, 29, 13, 190, 190, 12,
	1149, 187, 11, 10, 9, 190, 8, 7, 6, 5,
	4, 316, 224, 316, 76, 22, 2, 1167, 0, 0,
	0, 316, 0, 0, 1050, 1178, 1179, 1180, 1175, 307,
	0, 0, 1181, 0, 417, 0, 0, 0, 706, 707,
	1183, 820, 977, 1146, 1147, 316, 1148, 0, 0, 1150,
	445, 1152, 757, 758, 76, 76, 0, 0, 765, 0,
	0, 0, 0, 0, 0, 302, 1144, 1196, 1008, 820,
	1197, 1096, 772, 0, 774, 775, 0, 0, 0, 0,
	1195, 0, 1190, 76, 1192, 76, 76, 0, 0, 1081,
	527, 0, 1215, 759, 760, 1080, 0, 1186, 0, 0,
	0, 0, 1212, 0, 0, 0, 1202, 0, 0, 0,
	190, 0, 0, 0, 1223, 1229, 0, 0, 76, 0,
	1240, 0, 0, 0, 0, 1235, 0, 1236, 0, 0,
	1239, 76, 190, 0, 1081, 0, 47, 0, 76, 0,
	1080, 0, 1252, 0, 0, 425, 76, 426, 0, 190,
	0, 1143, 1256, 433, 814, 966, 0, 463, 1145, 0,
	435, 0, 0, 0, 0, 0, 0, 1270, 0, 1154,
	1155, 1156, 316, 0, 1159, 0, 1204, 1205, 0, 1206,
	1207, 1208, 1275, 1214, 0, 0, 0, 1169, 1170, 1171,
	1280, 1174, 188, 0, 0, 213, 0, 0, 76, 0,
	76, 76, 76, 190, 76, 1288, 1287, 0, 0, 0,
	76, 0, 0, 0, 1295, 1004, 316, 237, 316, 188,
	188, 0, 0, 0, 0, 188, 903, 1253, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 76, 76, 0,
	0, 316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 893, 894, 0, 466, 0, 0, 0, 0, 0,
	0, 316, 0, 555, 0, 0, 0, 0, 0, 1209,
	0, 0, 579, 918, 0, 0, 0, 781, 0, 76,
	76, 0, 0, 316, 1220, 1221, 1222, 0, 0, 933,
	0, 0, 76, 199, 0, 0, 0, 0, 762, 0,
	0, 1084, 966, 302, 762, 76, 0, 0, 0, 0,
	1244, 1245, 1246, 1247, 1297, 0, 920, 209, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	316, 937, 316, 1107, 0, 0, 188, 0, 188, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 1271, 0, 0, 0, 0, 1276,
	0, 76, 0, 0, 0, 1133, 0, 194, 0, 0,
	0, 0, 1281, 196, 0, 76, 0, 0, 1135, 0,
	202, 198, 0, 0, 0, 1138, 1157, 458, 0, 0,
	660, 661, 0, 316, 664, 0, 0, 667, 0, 0,
	0, 0, 0, 1299, 1300, 0, 0, 200, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 686, 492, 491, 501, 502, 494, 495, 496,
	497, 498, 499, 500, 493, 0, 0, 503, 0, 0,
	0, 705, 195, 0, 0, 1177, 0, 1177, 1177, 1177,
	458, 1182, 0, 0, 188, 0, 0, 316, 0, 0,
	0, 188, 577, 188, 0, 0, 0, 0, 0, 197,
	0, 205, 206, 207, 208, 212, 0, 0, 0, 0,
	211, 210, 1161, 316, 316, 316, 492, 491, 501, 502,
	494, 495, 496, 497, 498, 499, 500, 493, 1073, 0,
	503, 492, 491, 501, 502, 494, 495, 496, 497, 498,
	499, 500, 493, 1088, 1089, 503, 0, 1090, 0, 0,
	1092, 778, 0, 0, 0, 0, 1216, 1217, 501, 502,
	494, 495, 496, 497, 498, 499, 500, 493, 0, 1107,
	503, 0, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 1177, 0, 492, 491, 501, 502, 494, 495,
	496, 497, 498, 499, 500, 493, 0, 0, 503, 0,
	0, 0, 1255, 1158, 0, 0, 0, 0, 0, 0,
	0, 188, 188, 0, 0, 188, 0, 0, 188, 0,
	0, 0, 671, 0, 0, 0, 0, 1140, 0, 0,
	0, 0, 0, 0, 0, 762, 0, 0, 1277, 0,
	0, 0, 0, 188, 0, 23, 24, 48, 26, 27,
	0, 862, 1283, 0, 0, 0, 0, 0, 0, 0,
	886, 0, 188, 887, 42, 0, 1165, 0, 0, 28,
	0, 671, 0, 527, 1047, 492, 491, 501, 502, 494,
	495, 496, 497, 498, 499, 500, 493, 0, 37, 503,
	0, 0, 50, 0, 492, 491, 501, 502, 494, 495,
	496, 497, 498, 499, 500, 493, 0, 0, 503, 0,
	0, 0, 237, 0, 0, 0, 0, 237, 237, 0,
	0, 763, 763, 237, 0, 0, 0, 763, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 237, 237, 237,
	237, 0, 188, 0, 763, 188, 188, 188, 188, 188,
	0, 30, 31, 33, 32, 35, 0, 795, 0, 0,
	188, 0, 0, 0, 577, 0, 0, 0, 0, 188,
	188, 0, 36, 43, 44, 0, 0, 45, 46, 34,
	0, 0, 0, 0, 0, 0, 0, 0, 487, 0,
	490, 38, 39, 0, 40, 41, 504, 505, 506, 507,
	508, 509, 510, 0, 488, 489, 486, 492, 491, 501,
	502, 494, 495, 496, 497, 498, 499, 500, 493, 0,
	621, 503, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1269, 527, 915, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 188, 0, 492, 491, 501, 502,
	494, 495, 496, 497, 498, 499, 500, 493, 0, 0,
	503, 0, 0, 0, 0, 0, 0, 0, 49, 671,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 237, 0, 0, 0, 1040, 609, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 237, 0,
	0, 0, 0, 0, 0, 0, 0, 635, 636, 637,
	643, 644, 645, 646, 237, 638, 639, 640, 641, 642,
	647, 648, 649, 650, 651, 623, 624, 625, 626, 607,
	608, 0, 610, 0, 611, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 627, 628, 629, 630, 631, 632,
	633, 634, 188, 0, 0, 0, 0, 0, 0, 0,
	1129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1036, 1037,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 237, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 237, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 671, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 763, 0, 0, 0, 0, 0, 763, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 402, 392,
	188, 364, 404, 342, 356, 412, 357, 358, 385, 328,
	372, 124, 354, 0, 345, 323, 351, 324, 343, 366,
	92, 369, 341, 394, 375, 106, 410, 108, 380, 0,
	141, 117, 0, 0, 368, 396, 370, 390, 363, 386,
	333, 379, 405, 355, 383, 406, 0, 0, 0, 75,
	0, 821, 822, 0, 577, 0, 0, 0, 85, 0,
	382, 401, 353, 384, 322, 381, 0, 326, 329, 411,
	399, 348, 349, 978, 0, 0, 0, 0, 0, 0,
	367, 371, 387, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 378, 0, 0, 0, 330, 327,
	0, 365, 0, 0, 0, 332, 0, 347, 388, 0,
	321, 391, 397, 362, 191, 400, 360, 359, 403, 130,
	0, 0, 149, 97, 96, 105, 395, 344, 352, 88,
	350, 136, 126, 161, 377, 127, 135, 109, 153, 131,
	160, 192, 168, 151, 167, 78, 150, 159, 86, 138,
	80, 157, 143, 115, 101, 102, 79, 0, 144, 145,
	146, 147, 148, 134, 91, 95, 90, 123, 154, 155,
	89, 175, 82, 166, 83, 165, 122, 152, 158, 116,
	113, 81, 156, 114, 112, 104, 93, 98, 128, 111,
	129, 99, 119, 118, 120, 0, 325, 0, 142, 163,
	176, 340, 398, 169, 170, 171, 172, 0, 0, 763,
	121, 84, 100, 139, 103, 110, 133, 174, 125, 137,
	87, 162, 140, 336, 339, 334, 335, 373, 374, 407,
	408, 409, 389, 331, 0, 337, 338, 0, 393, 376,
	77, 107, 173, 132, 94, 164, 402, 392, 0, 364,
	404, 342, 356, 412, 357, 358, 385, 328, 372, 124,
	354, 0, 345, 323, 351, 324, 343, 366, 92, 369,
	341, 394, 375, 106, 410, 108, 380, 0, 141, 117,
	0, 0, 368, 396, 370, 390, 363, 386, 333, 379,
	405, 355, 383, 406, 0, 0, 0, 75, 0, 821,
	822, 0, 0, 0, 0, 0, 85, 0, 382, 401,
	353, 384, 322, 381, 0, 326, 329, 411, 399, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 367, 371,
	387, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	346, 0, 378, 0, 0, 0, 330, 327, 0, 365,
	0, 0, 0, 332, 0, 347, 388, 0, 321, 391,
	397, 362, 191, 400, 360, 359, 403, 130, 0, 0,
	149, 97, 96, 105, 395, 344, 352, 88, 350, 136,
	126, 161, 377, 127, 135, 109, 153, 131, 160, 192,
	168, 151, 167, 78, 150, 159, 86, 138, 80, 157,
	143, 115, 101, 102, 79, 0, 144, 145, 146, 147,
	148, 134, 91, 95, 90, 123, 154, 155, 89, 175,
	82, 166, 83, 165, 122, 152, 158, 116, 113, 81,
	156, 114, 112, 104, 93, 98, 128, 111, 129, 99,
	119, 118, 120, 0, 325, 0, 142, 163, 176, 340,
	398, 169, 170, 171, 172, 0, 0, 0, 121, 84,
	100, 139, 103, 110, 133, 174, 125, 137, 87, 162,
	140, 336, 339, 334, 335, 373, 374, 407, 408, 409,
	389, 331, 0, 337, 338, 0, 393, 376, 77, 107,
	173, 132, 94, 164, 402, 392, 0, 364, 404, 342,
	356, 412, 357, 358, 385, 328, 372, 124, 354, 0,
	345, 323, 351, 324, 343, 366, 92, 369, 341, 394,
	375, 106, 410, 108, 380, 0, 141, 117, 0, 0,
	368, 396, 370, 390, 363, 386, 333, 379, 405, 355,
	383, 406, 50, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 382, 401, 353, 384,
	322, 381, 0, 326, 329, 411, 399, 348, 349, 0,
	0, 0, 0, 0, 0, 0, 367, 371, 387, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	378, 0, 0, 0, 330, 327, 0, 365, 0, 0,
	0, 332, 0, 347, 388, 0, 321, 391, 397, 362,
	191, 400, 360, 359, 403, 130, 0, 0, 149, 97,
	96, 105, 395, 344, 352, 88, 350, 136, 126, 161,
	377, 127, 135, 109, 153, 131, 160, 192, 168, 151,
	167, 78, 150, 159, 86, 138, 80, 157, 143, 115,
	101, 102, 79, 0, 144, 145, 146, 147, 148, 134,
	91, 95, 90, 123, 154, 155, 89, 175, 82, 166,
	83, 165, 122, 152, 158, 116, 113, 81, 156, 114,
	112, 104, 93, 98, 128, 111, 129, 99, 119, 118,
	120, 0, 325, 0, 142, 163, 176, 340, 398, 169,
	170, 171, 172, 0, 0, 0, 121, 84, 100, 139,
	103, 110, 133, 174, 125, 137, 87, 162, 140, 336,
	339, 334, 335, 373, 374, 407, 408, 409, 389, 331,
	0, 337, 338, 0, 393, 376, 77, 107, 173, 132,
	94, 164, 402, 392, 0, 364, 404, 342, 356, 412,
	357, 358, 385, 328, 372, 124, 354, 0, 345, 323,
	351, 324, 343, 366, 92, 369, 341, 394, 375, 106,
	410, 108, 380, 0, 141, 117, 0, 0, 368, 396,
	370, 390, 363, 386, 333, 379, 405, 355, 383, 406,
	0, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 382, 401, 353, 384, 322, 381,
	0, 326, 329, 411, 399, 348, 349, 0, 0, 0,
	0, 0, 0, 0, 367, 371, 387, 361, 0, 0,
	0, 0, 0, 0, 1043, 0, 346, 0, 378, 0,
	0, 0, 330, 327, 0, 365, 0, 0, 0, 332,
	0, 347, 388, 0, 321, 391, 397, 362, 191, 400,
	360, 359, 403, 130, 0, 0, 149, 97, 96, 105,
	395, 344, 352, 88, 350, 136, 126, 161, 377, 127,
	135, 109, 153, 131, 160, 192, 168, 151, 167, 78,
	150, 159, 86, 138, 80, 157, 143, 115, 101, 102,
	79, 0, 144, 145, 146, 147, 148, 134, 91, 95,
	90, 123, 154, 155, 89, 175, 82, 166, 83, 165,
	122, 152, 158, 116, 113, 81, 156, 114, 112, 104,
	93, 98, 128, 111, 129, 99, 119, 118, 120, 0,
	325, 0, 142, 163, 176, 340, 398, 169, 170, 171,
	172, 0, 0, 0, 121, 84, 100, 139, 103, 110,
	133, 174, 125, 137, 87, 162, 140, 336, 339, 334,
	335, 373, 374, 407, 408, 409, 389, 331, 0, 337,
	338, 0, 393, 376, 77, 107, 173, 132, 94, 164,
	402, 392, 0, 364, 404, 342, 356, 412, 357, 358,
	385, 328, 372, 124, 354, 0, 345, 323, 351, 324,
	343, 366, 92, 369, 341, 394, 375, 106, 410, 108,
	380, 0, 141, 117, 0, 0, 368, 396, 370, 390,
	363, 386, 333, 379, 405, 355, 383, 406, 0, 0,
	0, 242, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 382, 401, 353, 384, 322, 381, 0, 326,
	329, 411, 399, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 367, 371, 387, 361, 0, 0, 0, 0,
	0, 0, 714, 0, 346, 0, 378, 0, 0, 0,
	330, 327, 0, 365, 0, 0, 0, 332, 0, 347,
	388, 0, 321, 391, 397, 362, 191, 400, 360, 359,
	403, 130, 0, 0, 149, 97, 96, 105, 395, 344,
	352, 88, 350, 136, 126, 161, 377, 127, 135, 109,
	153, 131, 160, 192, 168, 151, 167, 78, 150, 159,
	86, 138, 80, 157, 143, 115, 101, 102, 79, 0,
	144, 145, 146, 147, 148, 134, 91, 95, 90, 123,
	154, 155, 89, 175, 82, 166, 83, 165, 122, 152,
	158, 116, 113, 81, 156, 114, 112, 104, 93, 98,
	128, 111, 129, 99, 119, 118, 120, 0, 325, 0,
	142, 163, 176, 340, 398, 169, 170, 171, 172, 0,
	0, 0, 121, 84, 100, 139, 103, 110, 133, 174,
	125, 137, 87, 162, 140, 336, 339, 334, 335, 373,
	374, 407, 408, 409, 389, 331, 0, 337, 338, 0,
	393, 376, 77, 107, 173, 132, 94, 164, 402, 392,
	0, 364, 404, 342, 356, 412, 357, 358, 385, 328,
	372, 124, 354, 0, 345, 323, 351, 324, 343, 366,
	92, 369, 341, 394, 375, 106, 410, 108, 380, 0,
	141, 117, 0, 0, 368, 396, 370, 390, 363, 386,
	333, 379, 405, 355, 383, 406, 0, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	382, 401, 353, 384, 322, 381, 0, 326, 329, 411,
	399, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	367, 371, 387, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 378, 0, 0, 0, 330, 327,
	0, 365, 0, 0, 0, 332, 0, 347, 388, 0,
	321, 391, 397, 362, 191, 400, 360, 359, 403, 130,
	0, 0, 149, 97, 96, 105, 395, 344, 352, 88,
	350, 136, 126, 161, 377, 127, 135, 109, 153, 131,
	160, 192, 168, 151, 167, 78, 150, 159, 86, 138,
	80, 157, 143, 115, 101, 102, 79, 0, 144, 145,
	146, 147, 148, 134, 91, 95, 90, 123, 154, 155,
	89, 175, 82, 166, 83, 165, 122, 152, 158, 116,
	113, 81, 156, 114, 112, 104, 93, 98, 128, 111,
	129, 99, 119, 118, 120, 0, 325, 0, 142, 163,
	176, 340, 398, 169, 170, 171, 172, 0, 0, 0,
	121, 84, 100, 139, 103, 110, 133, 174, 125, 137,
	87, 162, 140, 336, 339, 334, 335, 373, 374, 407,
	408, 409, 389, 331, 0, 337, 338, 0, 393, 376,
	77, 107, 173, 132, 94, 164, 402, 392, 0, 364,
	404, 342, 356, 412, 357, 358, 385, 328, 372, 124,
	354, 0, 345, 323, 351, 324, 343, 366, 92, 369,
	341, 394, 375, 106, 410, 108, 380, 0, 141, 117,
	0, 0, 368, 396, 370, 390, 363, 386, 333, 379,
	405, 355, 383, 406, 0, 0, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 382, 401,
	353, 384, 322, 381, 0, 326, 329, 411, 399, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 367, 371,
	387, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	346, 0, 378, 0, 0, 0, 330, 327, 0, 365,
	0, 0, 0, 332, 0, 347, 388, 0, 321, 391,
	397, 362, 191, 400, 360, 359, 403, 130, 0, 0,
	149, 97, 96, 105, 395, 344, 352, 88, 350, 136,
	126, 161, 377, 127, 135, 109, 153, 131, 160, 192,
	168, 151, 167, 78, 150, 159, 86, 138, 80, 157,
	143, 115, 101, 102, 79, 0, 144, 145, 146, 147,
	148, 134, 91, 95, 90, 123, 154, 155, 89, 175,
	82, 166, 83, 165, 122, 152, 158, 116, 113, 81,
	156, 114, 112, 104, 93, 98, 128, 111, 129, 99,
	119, 118, 120, 0, 325, 0, 142, 163, 176, 340,
	398, 169, 170, 171, 172, 0, 0, 0, 121, 84,
	100, 139, 103, 110, 133, 174, 125, 137, 87, 162,
	140, 336, 339, 334, 335, 373, 374, 407, 408, 409,
	389, 331, 0, 337, 338, 0, 393, 376, 77, 107,
	173, 132, 94, 164, 402, 392, 0, 364, 404, 342,
	356, 412, 357, 358, 385, 328, 372, 124, 354, 0,
	345, 323, 351, 324, 343, 366, 92, 369, 341, 394,
	375, 106, 410, 108, 380, 0, 141, 117, 0, 0,
	368, 396, 370, 390, 363, 386, 333, 379, 405, 355,
	383, 406, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 382, 401, 353, 384,
	322, 381, 0, 326, 329, 411, 399, 348, 349, 0,
	0, 0, 0, 0, 0, 0, 367, 371, 387, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	378, 0, 0, 0, 330, 327, 0, 365, 0, 0,
	0, 332, 0, 347, 388, 0, 321, 391, 397, 362,
	191, 400, 360, 359, 403, 130, 0, 0, 149, 97,
	96, 105, 395, 344, 352, 88, 350, 136, 126, 161,
	377, 127, 135, 109, 153, 131, 160, 192, 168, 151,
	167, 78, 150, 159, 86, 138, 80, 157, 143, 115,
	101, 102, 79, 0, 144, 145, 146, 147, 148, 134,
	91, 95, 90, 123, 154, 155, 89, 175, 82, 166,
	319, 165, 122, 152, 158, 116, 113, 81, 156, 114,
	112, 104, 93, 98, 128, 111, 129, 99, 119, 118,
	120, 0, 325, 0, 142, 163, 176, 340, 398, 169,
	170, 171, 172, 0, 0, 0, 320, 318, 100, 139,
	103, 110, 133, 174, 125, 137, 87, 162, 140, 336,
	339, 334, 335, 373, 374, 407, 408, 409, 389, 331,
	0, 337, 338, 0, 393, 376, 77, 107, 173, 132,
	94, 164, 402, 392, 0, 364, 404, 342, 356, 412,
	357, 358, 385, 328, 372, 124, 354, 0, 345, 323,
	351, 324, 343, 366, 92, 369, 341, 394, 375, 106,
	410, 108, 380, 0, 141, 117, 0, 0, 368, 396,
	370, 390, 363, 386, 333, 379, 405, 355, 383, 406,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 382, 401, 353, 384, 322, 381,
	0, 326, 329, 411, 399, 348, 349, 0, 0, 0,
	0, 0, 0, 0, 367, 371, 387, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 346, 0, 378, 0,
	0, 0, 330, 327, 0, 365, 0, 0, 0, 332,
	0, 347, 388, 0, 321, 391, 397, 362, 191, 400,
	360, 359, 403, 130, 0, 0, 149, 97, 96, 105,
	395, 344, 352, 88, 350, 136, 126, 161, 377, 127,
	135, 109, 153, 131, 160, 192, 168, 151, 167, 78,
	150, 159, 86, 138, 80, 157, 143, 115, 101, 102,
	79, 0, 144, 145, 146, 147, 148, 134, 91, 95,
	90, 123, 154, 155, 89, 175, 82, 166, 83, 165,
	122, 152, 158, 116, 113, 81, 156, 114, 112, 104,
	93, 98, 128, 111, 129, 99, 119, 118, 120, 0,
	325, 0, 142, 163, 176, 340, 398, 169, 170, 171,
	172, 0, 0, 0, 121, 84, 100, 139, 103, 110,
	133, 174, 125, 137, 87, 162, 140, 336, 339, 334,
	335, 373, 374, 407, 408, 409, 389, 331, 0, 337,
	338, 0, 393, 376, 77, 107, 173, 132, 94, 164,
	402, 392, 0, 364, 404, 342, 356, 412, 357, 358,
	385, 328, 372, 124, 354, 0, 345, 323, 351, 324,
	343, 366, 92, 369, 341, 394, 375, 106, 410, 108,
	380, 0, 141, 117, 0, 0, 368, 396, 370, 390,
	363, 386, 333, 379, 405, 355, 383, 406, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 382, 401, 353, 384, 322, 381, 0, 326,
	329, 411, 399, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 367, 371, 387, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 378, 0, 0, 0,
	330, 327, 0, 365, 0, 0, 0, 332, 0, 347,
	388, 0, 321, 391, 397, 362, 191, 400, 360, 359,
	403, 130, 0, 0, 149, 97, 96, 105, 395, 344,
	352, 88, 350, 136, 126, 161, 377, 127, 135, 109,
	153, 131, 160, 192, 168, 151, 167, 78, 150, 587,
	86, 138, 80, 157, 143, 115, 101, 102, 79, 0,
	144, 145, 146, 147, 148, 134, 91, 95, 90, 123,
	154, 155, 89, 175, 82, 166, 319, 165, 122, 152,
	158, 116, 113, 81, 156, 114, 112, 104, 93, 98,
	128, 111, 129, 99, 119, 118, 120, 0, 325, 0,
	142, 163, 176, 340, 398, 169, 170, 171, 172, 0,
	0, 0, 320, 318, 100, 139, 103, 110, 133, 174,
	125, 137, 87, 162, 140, 336, 339, 334, 335, 373,
	374, 407, 408, 409, 389, 331, 0, 337, 338, 0,
	393, 376, 77, 107, 173, 132, 94, 164, 402, 392,
	0, 364, 404, 342, 356, 412, 357, 358, 385, 328,
	372, 124, 354, 0, 345, 323, 351, 324, 343, 366,
	92, 369, 341, 394, 375, 106, 410, 108, 380, 0,
	141, 117, 0, 0, 368, 396, 370, 390, 363, 386,
	333, 379, 405, 355, 383, 406, 0, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	382, 401, 353, 384, 322, 381, 0, 326, 329, 411,
	399, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	367, 371, 387, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 378, 0, 0, 0, 330, 327,
	0, 365, 0, 0, 0, 332, 0, 347, 388, 0,
	321, 391, 397, 362, 191, 400, 360, 359, 403, 130,
	0, 0, 149, 97, 96, 105, 395, 344, 352, 88,
	350, 136, 126, 161, 377, 127, 135, 109, 153, 131,
	160, 192, 168, 151, 167, 78, 150, 310, 86, 138,
	80, 157, 143, 115, 101, 102, 79, 0, 144, 145,
	146, 147, 148, 134, 91, 95, 90, 123, 154, 155,
	89, 175, 82, 166, 319, 165, 122, 152, 158, 116,
	113, 81, 156, 114, 112, 104, 93, 98, 128, 111,
	129, 99, 119, 118, 120, 0, 325, 0, 142, 163,
	176, 340, 398, 169, 170, 171, 172, 0, 0, 0,
	320, 318, 313, 312, 103, 110, 133, 174, 125, 137,
	87, 162, 140, 336, 339, 334, 335, 373, 374, 407,
	408, 409, 389, 331, 0, 337, 338, 0, 393, 376,
	77, 107, 173, 132, 94, 164, 124, 0, 0, 750,
	0, 244, 0, 0, 0, 92, 0, 241, 0, 0,
	106, 283, 108, 0, 0, 141, 117, 0, 0, 0,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 242, 262, 261, 264, 265, 266,
	267, 0, 0, 85, 263, 268, 269, 270, 0, 0,
	239, 255, 0, 282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 235, 0, 0, 0, 294,
	0, 254, 0, 0, 250, 251, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 292, 0, 130, 0, 0, 149, 97, 96,
	105, 0, 0, 0, 88, 0, 136, 126, 161, 0,
	127, 135, 109, 153, 131, 160, 192, 168, 151, 167,
	78, 150, 159, 86, 138, 80, 157, 143, 115, 101,
	102, 79, 0, 144, 145, 146, 147, 148, 134, 91,
	95, 90, 123, 154, 155, 89, 175, 82, 166, 83,
	165, 122, 152, 158, 116, 113, 81, 156, 114, 112,
	104, 93, 98, 128, 111, 129, 99, 119, 118, 120,
	0, 0, 0, 142, 163, 176, 0, 0, 169, 170,
	171, 172, 0, 0, 0, 121, 84, 100, 139, 103,
	110, 133, 174, 125, 137, 87, 162, 140, 284, 293,
	290, 291, 288, 289, 287, 286, 285, 295, 276, 277,
	278, 279, 281, 0, 280, 77, 107, 173, 132, 94,
	164, 124, 0, 0, 0, 0, 244, 0, 0, 0,
	92, 0, 241, 0, 0, 106, 283, 108, 0, 0,
	141, 117, 0, 0, 0, 0, 274, 275, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 458, 242,
	262, 261, 264, 265, 266, 267, 0, 0, 85, 263,
	268, 269, 270, 0, 0, 239, 255, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	0, 0, 0, 0, 294, 0, 254, 0, 0, 250,
	251, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 292, 0, 130,
	0, 0, 149, 97, 96, 105, 0, 0, 0, 88,
	0, 136, 126, 161, 0, 127, 135, 109, 153, 131,
	160, 192, 168, 151, 167, 78, 150, 159, 86, 138,
	80, 157, 143, 115, 101, 102, 79, 0, 144, 145,
	146, 147, 148, 134, 91, 95, 90, 123, 154, 155,
	89, 175, 82, 166, 83, 165, 122, 152, 158, 116,
	113, 81, 156, 114, 112, 104, 93, 98, 128, 111,
	129, 99, 119, 118, 120, 0, 0, 0, 142, 163,
	176, 0, 0, 169, 170, 171, 172, 0, 0, 0,
	121, 84, 100, 139, 103, 110, 133, 174, 125, 137,
	87, 162, 140, 284, 293, 290, 291, 288, 289, 287,
	286, 285, 295, 276, 277, 278, 279, 281, 0, 280,
	77, 107, 173, 132, 94, 164, 124, 0, 0, 0,
	0, 244, 0, 0, 0, 92, 0, 241, 0, 0,
	106, 283, 108, 0, 0, 141, 117, 0, 0, 0,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 242, 262, 261, 264, 265, 266,
	267, 0, 0, 85, 263, 268, 269, 270, 0, 0,
	239, 255, 0, 282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 235, 0, 0, 0, 294,
	0, 254, 0, 0, 250, 251, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 292, 0, 130, 0, 0, 149, 97, 96,
	105, 0, 0, 0, 88, 0, 136, 126, 161, 0,
	127, 135, 109, 153, 131, 160, 192, 168, 151, 167,
	78, 150, 159, 86, 138, 80, 157, 143, 115, 101,
	102, 79, 0, 144, 145, 146, 147, 148, 134, 91,
	95, 90, 123, 154, 155, 89, 175, 82, 166, 83,
	165, 122, 152, 158, 116, 113, 81, 156, 114, 112,
	104, 93, 98, 128, 111, 129, 99, 119, 118, 120,
	0, 0, 0, 142, 163, 176, 0, 0, 169, 170,
	171, 172, 0, 0, 0, 121, 84, 100, 139, 103,
	110, 133, 174, 125, 137, 87, 162, 140, 284, 293,
	290, 291, 288, 289, 287, 286, 285, 295, 276, 277,
	278, 279, 281, 0, 280, 77, 107, 173, 132, 94,
	164, 124, 0, 0, 0, 0, 244, 0, 0, 0,
	92, 0, 241, 0, 0, 106, 283, 108, 0, 0,
	141, 117, 0, 0, 0, 0, 274, 275, 0, 0,
	0, 0, 0, 0, 813, 0, 50, 0, 0, 242,
	262, 261, 264, 265, 266, 267, 0, 0, 85, 263,
	268, 269, 270, 0, 0, 239, 255, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	0, 0, 0, 0, 294, 0, 254, 0, 0, 250,
	251, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 292, 0, 130,
	0, 0, 149, 97, 96, 105, 0, 0, 0, 88,
	0, 136, 126, 161, 0, 127, 135, 109, 153, 131,
	160, 192, 168, 151, 167, 78, 150, 159, 86, 138,
	80, 157, 143, 115, 101, 102, 79, 0, 144, 145,
	146, 147, 148, 134, 91, 95, 90, 123, 154, 155,
	89, 175, 82, 166, 83, 165, 122, 152, 158, 116,
	113, 81, 156, 114, 112, 104, 93, 98, 128, 111,
	129, 99, 119, 118, 120, 0, 0, 0, 142, 163,
	176, 0, 0, 169, 170, 171, 172, 0, 0, 0,
	121, 84, 100, 139, 103, 110, 133, 174, 125, 137,
	87, 162, 140, 284, 293, 290, 291, 288, 289, 287,
	286, 285, 295, 276, 277, 278, 279, 281, 23, 280,
	77, 107, 173, 132, 94, 164, 0, 0, 0, 0,
	124, 0, 0, 0, 0, 244, 0, 0, 0, 92,
	0, 241, 0, 0, 106, 283, 108, 0, 0, 141,
	117, 0, 0, 0, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 242, 262,
	261, 264, 265, 266, 267, 0, 0, 85, 263, 268,
	269, 270, 0, 0, 239, 255, 0, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 0,
	0, 0, 0, 294, 0, 254, 0, 0, 250, 251,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 292, 0, 130, 0,
	0, 149, 97, 96, 105, 0, 0, 0, 88, 0,
	136, 126, 161, 0, 127, 135, 109, 153, 131, 160,
	192, 168, 151, 167, 78, 150, 159, 86, 138, 80,
	157, 143, 115, 101, 102, 79, 0, 144, 145, 146,
	147, 148, 134, 91, 95, 90, 123, 154, 155, 89,
	175, 82, 166, 83, 165, 122, 152, 158, 116, 113,
	81, 156, 114, 112, 104, 93, 98, 128, 111, 129,
	99, 119, 118, 120, 0, 0, 0, 142, 163, 176,
	0, 0, 169, 170, 171, 172, 0, 0, 0, 121,
	84, 100, 139, 103, 110, 133, 174, 125, 137, 87,
	162, 140, 284, 293, 290, 291, 288, 289, 287, 286,
	285, 295, 276, 277, 278, 279, 281, 0, 280, 77,
	107, 173, 132, 94, 164, 124, 0, 0, 0, 0,
	244, 0, 0, 0, 92, 0, 241, 0, 0, 106,
	283, 108, 0, 0, 141, 117, 0, 0, 0, 0,
	274, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 242, 262, 261, 264, 265, 266, 267,
	0, 0, 85, 263, 268, 269, 270, 0, 0, 239,
	255, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 0, 0, 0, 0, 294, 0,
	254, 0, 0, 250, 251, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 292, 0, 130, 0, 0, 149, 97, 96, 105,
	0, 0, 0, 88, 0, 136, 126, 161, 0, 127,
	135, 109, 153, 131, 160, 192, 168, 151, 167, 78,
	150, 159, 86, 138, 80, 157, 143, 115, 101, 102,
	79, 0, 144, 145, 146, 147, 148, 134, 91, 95,
	90, 123, 154, 155, 89, 175, 82, 166, 83, 165,
	122, 152, 158, 116, 113, 81, 156, 114, 112, 104,
	93, 98, 128, 111, 129, 99, 119, 118, 120, 0,
	0, 0, 142, 163, 176, 0, 0, 169, 170, 171,
	172, 0, 0, 0, 121, 84, 100, 139, 103, 110,
	133, 174, 125, 137, 87, 162, 140, 284, 293, 290,
	291, 288, 289, 287, 286, 285, 295, 276, 277, 278,
	279, 281, 124, 280, 77, 107, 173, 132, 94, 164,
	0, 92, 0, 0, 0, 0, 106, 283, 108, 0,
	0, 141, 117, 0, 0, 0, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	242, 262, 261, 264, 265, 266, 267, 0, 0, 85,
	263, 268, 269, 270, 0, 0, 0, 255, 0, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 0, 0, 0, 0, 294, 0, 254, 0, 0,
	250, 251, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 292, 0,
	130, 0, 0, 149, 97, 96, 105, 0, 0, 0,
	88, 0, 136, 126, 161, 1298, 127, 135, 109, 153,
	131, 160, 192, 168, 151, 167, 78, 150, 159, 86,
	138, 80, 157, 143, 115, 101, 102, 79, 0, 144,
	145, 146, 147, 148, 134, 91, 95, 90, 123, 154,
	155, 89, 175, 82, 166, 83, 165, 122, 152, 158,
	116, 113, 81, 156, 114, 112, 104, 93, 98, 128,
	111, 129, 99, 119, 118, 120, 0, 0, 0, 142,
	163, 176, 0, 0, 169, 170, 171, 172, 0, 0,
	0, 121, 84, 100, 139, 103, 110, 133, 174, 125,
	137, 87, 162, 140, 284, 293, 290, 291, 288, 289,
	287, 286, 285, 295, 276, 277, 278, 279, 281, 124,
	280, 77, 107, 173, 132, 94, 164, 0, 92, 0,
	0, 0, 0, 106, 283, 108, 0, 0, 141, 117,
	0, 0, 0, 0, 274, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 242, 262, 261,
	264, 265, 266, 267, 0, 0, 85, 263, 268, 269,
	270, 0, 0, 0, 255, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 0, 0,
	0, 0, 294, 0, 254, 0, 0, 250, 251, 256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 292, 0, 130, 0, 0,
	149, 97, 96, 105, 0, 0, 0, 88, 0, 136,
	126, 161, 0, 127, 135, 109, 153, 131, 160, 192,
	168, 151, 167, 78, 150, 159, 86, 138, 80, 157,
	143, 115, 101, 102, 79, 0, 144, 145, 146, 147,
	148, 134, 91, 95, 90, 123, 154, 155, 89, 175,
	82, 166, 83, 165, 122, 152, 158, 116, 113, 81,
	156, 114, 112, 104, 93, 98, 128, 111, 129, 99,
	119, 118, 120, 0, 0, 0, 142, 163, 176, 0,
	0, 169, 170, 171, 172, 0, 0, 0, 121, 84,
	100, 139, 103, 110, 133, 174, 125, 137, 87, 162,
	140, 284, 293, 290, 291, 288, 289, 287, 286, 285,
	295, 276, 277, 278, 279, 281, 124, 280, 77, 107,
	173, 132, 94, 164, 0, 92, 0, 0, 0, 0,
	106, 0, 108, 0, 0, 141, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 492,
	491, 501, 502, 494, 495, 496, 497, 498, 499, 500,
	493, 0, 0, 503, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 130, 0, 0, 149, 97, 96,
	105, 0, 0, 0, 88, 0, 136, 126, 161, 0,
	127, 135, 109, 153, 131, 160, 192, 168, 151, 167,
	78, 150, 159, 86, 138, 80, 157, 143, 115, 101,
	102, 79, 0, 144, 145, 146, 147, 148, 134, 91,
	95, 90, 123, 154, 155, 89, 175, 82, 166, 83,
	165, 122, 152, 158, 116, 113, 81, 156, 114, 112,
	104, 93, 98, 128, 111, 129, 99, 119, 118, 120,
	0, 0, 0, 142, 163, 176, 0, 0, 169, 170,
	171, 172, 0, 0, 0, 121, 84, 100, 139, 103,
	110, 133, 174, 125, 137, 87, 162, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 107, 173, 132, 94,
	164, 124, 0, 0, 0, 480, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 106, 0, 108, 0, 0,
	141, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 482, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 477, 476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 130,
	0, 0, 149, 97, 96, 105, 0, 0, 0, 88,
	0, 136, 126, 161, 0, 127, 135, 109, 153, 131,
	160, 192, 168, 151, 167, 78, 150, 159, 86, 138,
	80, 157, 143, 115, 101, 102, 79, 0, 144, 145,
	146, 147, 148, 134, 91, 95, 90, 123, 154, 155,
	89, 175, 82, 166, 83, 165, 122, 152, 158, 116,
	113, 81, 156, 114, 112, 104, 93, 98, 128, 111,
	129, 99, 119, 118, 120, 0, 0, 0, 142, 163,
	176, 0, 0, 169, 170, 171, 172, 0, 0, 0,
	121, 84, 100, 139, 103, 110, 133, 174, 125, 137,
	87, 162, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	77, 107, 173, 132, 94, 164, 92, 0, 0, 0,
	0, 106, 0, 108, 0, 0, 141, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 68,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 72, 0,
	67, 0, 0, 0, 73, 130, 0, 0, 149, 97,
	96, 105, 0, 0, 0, 88, 0, 136, 126, 161,
	0, 127, 135, 109, 153, 131, 160, 69, 168, 151,
	167, 78, 150, 159, 86, 138, 80, 157, 143, 115,
	101, 102, 79, 0, 144, 145, 146, 147, 148, 134,
	91, 95, 90, 123, 154, 155, 89, 175, 82, 166,
	83, 165, 122, 152, 158, 116, 113, 81, 156, 114,
	112, 104, 93, 98, 128, 111, 129, 99, 119, 118,
	120, 0, 0, 0, 142, 163, 176, 0, 0, 169,
	170, 171, 172, 0, 0, 0, 121, 84, 100, 139,
	103, 110, 133, 174, 125, 137, 87, 162, 140, 0,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 107, 173, 132,
	94, 164, 124, 0, 0, 0, 576, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 106, 0, 108, 0,
	0, 141, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 578, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	130, 0, 0, 149, 97, 96, 105, 0, 0, 0,
	88, 0, 136, 126, 161, 0, 127, 135, 109, 153,
	131, 160, 192, 168, 151, 167, 78, 150, 159, 86,
	138, 80, 157, 143, 115, 101, 102, 79, 0, 144,
	145, 146, 147, 148, 134, 91, 95, 90, 123, 154,
	155, 89, 175, 82, 166, 83, 165, 122, 152, 158,
	116, 113, 81, 156, 114, 112, 104, 93, 98, 128,
	111, 129, 99, 119, 118, 120, 0, 0, 0, 142,
	163, 176, 0, 0, 169, 170, 171, 172, 0, 0,
	0, 121, 84, 100, 139, 103, 110, 133, 174, 125,
	137, 87, 162, 140, 0, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 77, 107, 173, 132, 94, 164, 92, 0, 0,
	0, 0, 106, 0, 108, 0, 0, 141, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 130, 0, 0, 149,
	97, 96, 105, 0, 0, 0, 88, 0, 136, 126,
	161, 0, 127, 135, 109, 153, 131, 160, 192, 168,
	151, 167, 78, 150, 159, 86, 138, 80, 157, 143,
	115, 101, 102, 79, 0, 144, 145, 146, 147, 148,
	134, 91, 95, 90, 123, 154, 155, 89, 175, 82,
	166, 83, 165, 122, 152, 158, 116, 113, 81, 156,
	114, 112, 104, 93, 98, 128, 111, 129, 99, 119,
	118, 120, 0, 0, 0, 142, 163, 176, 0, 0,
	169, 170, 171, 172, 0, 0, 0, 121, 84, 100,
	139, 103, 110, 133, 174, 125, 137, 87, 162, 140,
	0, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 77, 107, 173,
	132, 94, 164, 92, 0, 0, 0, 0, 106, 0,
	108, 0, 0, 141, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 130, 0, 0, 149, 97, 96, 105, 0,
	0, 0, 88, 0, 136, 126, 161, 0, 127, 135,
	109, 153, 131, 160, 192, 168, 151, 167, 78, 150,
	159, 86, 138, 80, 157, 143, 115, 101, 102, 79,
	0, 144, 145, 146, 147, 148, 134, 91, 95, 90,
	123, 154, 155, 89, 175, 82, 166, 83, 165, 122,
	152, 158, 116, 113, 81, 156, 114, 112, 104, 93,
	98, 128, 111, 129, 99, 119, 118, 120, 0, 0,
	0, 142, 163, 176, 0, 0, 169, 170, 171, 172,
	0, 0, 0, 121, 84, 100, 139, 103, 110, 133,
	174, 125, 137, 87, 162, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 77, 107, 173, 132, 94, 164, 92,
	0, 0, 0, 0, 106, 0, 108, 0, 0, 141,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	0, 701, 0, 0, 702, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 130, 0,
	0, 149, 97, 96, 105, 0, 0, 0, 88, 0,
	136, 126, 161, 0, 127, 135, 109, 153, 131, 160,
	192, 168, 151, 167, 78, 150, 159, 86, 138, 80,
	157, 143, 115, 101, 102, 79, 0, 144, 145, 146,
	147, 148, 134, 91, 95, 90, 123, 154, 155, 89,
	175, 82, 166, 83, 165, 122, 152, 158, 116, 113,
	81, 156, 114, 112, 104, 93, 98, 128, 111, 129,
	99, 119, 118, 120, 0, 0, 0, 142, 163, 176,
	0, 0, 169, 170, 171, 172, 0, 0, 0, 121,
	84, 100, 139, 103, 110, 133, 174, 125, 137, 87,
	162, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 77,
	107, 173, 132, 94, 164, 92, 0, 596, 0, 0,
	106, 0, 108, 0, 0, 141, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 595, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 130, 0, 0, 149, 97, 96,
	105, 0, 0, 0, 88, 0, 136, 126, 161, 0,
	127, 135, 109, 153, 131, 160, 192, 168, 151, 167,
	78, 150, 159, 86, 138, 80, 157, 143, 115, 101,
	102, 79, 0, 144, 145, 146, 147, 148, 134, 91,
	95, 90, 123, 154, 155, 89, 175, 82, 166, 83,
	165, 122, 152, 158, 116, 113, 81, 156, 114, 112,
	104, 93, 98, 128, 111, 129, 99, 119, 118, 120,
	0, 0, 0, 142, 163, 176, 0, 0, 169, 170,
	171, 172, 0, 0, 0, 121, 84, 100, 139, 103,
	110, 133, 174, 125, 137, 87, 162, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 107, 173, 132, 94,
	164, 124, 0, 0, 0, 576, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 106, 0, 108, 0, 0,
	141, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 578, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 130,
	0, 0, 149, 97, 96, 105, 0, 0, 0, 88,
	0, 136, 126, 161, 0, 574, 135, 109, 153, 131,
	160, 192, 168, 151, 167, 78, 150, 159, 86, 138,
	80, 157, 143, 115, 101, 102, 79, 0, 144, 145,
	146, 147, 148, 134, 91, 95, 90, 123, 154, 155,
	89, 175, 82, 166, 83, 165, 122, 152, 158, 116,
	113, 81, 156, 114, 112, 104, 93, 98, 128, 111,
	129, 99, 119, 118, 120, 0, 0, 0, 142, 163,
	176, 0, 0, 169, 170, 171, 172, 0, 0, 0,
	121, 84, 100, 139, 103, 110, 133, 174, 125, 137,
	87, 162, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	77, 107, 173, 132, 94, 164, 92, 0, 0, 0,
	0, 106, 0, 108, 0, 0, 141, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 130, 0, 0, 149, 97,
	96, 105, 0, 0, 0, 88, 0, 136, 126, 161,
	0, 127, 135, 109, 153, 131, 160, 192, 168, 151,
	167, 78, 150, 159, 86, 138, 80, 157, 143, 115,
	101, 102, 79, 0, 144, 145, 146, 147, 148, 134,
	91, 95, 90, 123, 154, 155, 89, 175, 82, 166,
	83, 165, 122, 152, 158, 116, 113, 81, 156, 114,
	112, 104, 93, 98, 128, 111, 129, 99, 119, 118,
	120, 0, 0, 0, 142, 163, 176, 0, 0, 169,
	170, 171, 172, 0, 0, 0, 121, 84, 100, 139,
	103, 110, 133, 174, 125, 137, 87, 162, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 77, 107, 173, 132,
	94, 164, 92, 0, 0, 0, 0, 106, 0, 108,
	0, 0, 141, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 578, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 130, 0, 0, 149, 97, 96, 105, 0, 0,
	0, 88, 0, 136, 126, 161, 0, 127, 135, 109,
	153, 131, 160, 192, 168, 151, 167, 78, 150, 159,
	86, 138, 80, 157, 143, 115, 101, 102, 79, 0,
	144, 145, 146, 147, 148, 134, 91, 95, 90, 123,
	154, 155, 89, 175, 82, 166, 83, 165, 122, 152,
	158, 116, 113, 81, 156, 114, 112, 104, 93, 98,
	128, 111, 129, 99, 119, 118, 120, 0, 0, 0,
	142, 163, 176, 0, 0, 169, 170, 171, 172, 0,
	0, 0, 121, 84, 100, 139, 103, 110, 133, 174,
	125, 137, 87, 162, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 77, 107, 173, 132, 94, 164, 92, 0,
	0, 0, 0, 106, 0, 108, 0, 0, 141, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 482,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 0, 130, 0, 0,
	149, 97, 96, 105, 0, 0, 0, 88, 0, 136,
	126, 161, 0, 127, 135, 109, 153, 131, 160, 192,
	168, 151, 167, 78, 150, 159, 86, 138, 80, 157,
	143, 115, 101, 102, 79, 0, 144, 145, 146, 147,
	148, 134, 91, 95, 90, 123, 154, 155, 89, 175,
	82, 166, 83, 165, 122, 152, 158, 116, 113, 81,
	156, 114, 112, 104, 93, 98, 128, 111, 129, 99,
	119, 118, 120, 0, 0, 0, 142, 163, 176, 0,
	0, 169, 170, 171, 172, 0, 0, 0, 121, 84,
	100, 139, 103, 110, 133, 174, 125, 137, 87, 162,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 77, 107,
	173, 132, 94, 164, 554, 92, 0, 0, 0, 0,
	106, 0, 108, 0, 0, 141, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 130, 0, 0, 149, 97, 96,
	105, 0, 0, 0, 88, 0, 136, 126, 161, 0,
	127, 135, 109, 153, 131, 160, 192, 168, 151, 167,
	78, 150, 159, 86, 138, 80, 157, 143, 115, 101,
	102, 79, 0, 144, 145, 146, 147, 148, 134, 91,
	95, 90, 123, 154, 155, 89, 175, 82, 166, 83,
	165, 122, 152, 158, 116, 113, 81, 156, 114, 112,
	104, 93, 98, 128, 111, 129, 99, 119, 118, 120,
	0, 0, 0, 142, 163, 176, 0, 0, 169, 170,
	171, 172, 0, 0, 0, 121, 84, 100, 139, 103,
	110, 133, 174, 125, 137, 87, 162, 140, 0, 0,
	0, 0, 0, 0, 0, 305, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 77, 107, 173, 132, 94,
	164, 92, 0, 0, 0, 0, 106, 0, 108, 0,
	0, 141, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	130, 0, 0, 149, 97, 96, 105, 0, 0, 0,
	88, 0, 136, 126, 161, 0, 127, 135, 109, 153,
	131, 160, 192, 168, 151, 167, 78, 150, 159, 86,
	138, 80, 157, 143, 115, 101, 102, 79, 0, 144,
	145, 146, 147, 148, 134, 91, 95, 90, 123, 154,
	155, 89, 175, 82, 166, 83, 165, 122, 152, 158,
	116, 113, 81, 156, 114, 112, 104, 93, 98, 128,
	111, 129, 99, 119, 118, 120, 0, 0, 0, 142,
	163, 176, 0, 0, 169, 170, 171, 172, 0, 0,
	0, 121, 84, 100, 139, 103, 110, 133, 174, 125,
	137, 87, 162, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 77, 107, 173, 132, 94, 164, 92, 0, 0,
	0, 0, 106, 0, 108, 0, 0, 141, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 191, 0, 0, 0, 0, 130, 0, 0, 149,
	97, 96, 105, 0, 0, 0, 88, 0, 136, 126,
	161, 0, 127, 135, 109, 153, 131, 160, 192, 168,
	151, 167, 78, 150, 159, 86, 138, 80, 157, 143,
	115, 101, 102, 79, 0, 144, 145, 146, 147, 148,
	134, 91, 95, 90, 123, 154, 155, 89, 175, 82,
	166, 83, 165, 122, 152, 158, 116, 113, 81, 156,
	114, 112, 104, 93, 98, 128, 111, 129, 99, 119,
	118, 120, 0, 0, 0, 142, 163, 176, 0, 0,
	169, 170, 171, 172, 0, 0, 0, 121, 84, 100,
	139, 103, 110, 133, 174, 125, 137, 87, 162, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 77, 107, 173,
	132, 94, 164, 92, 0, 0, 0, 0, 106, 0,
	108, 0, 0, 141, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 130, 0, 0, 149, 97, 96, 105, 0,
	0, 0, 88, 0, 136, 126, 161, 0, 127, 135,
	109, 153, 131, 160, 192, 168, 151, 167, 78, 150,
	159, 86, 138, 80, 157, 143, 115, 101, 102, 79,
	0, 144, 145, 146, 147, 148, 134, 91, 95, 90,
	123, 154, 155, 89, 175, 82, 166, 83, 165, 122,
	152, 158, 116, 113, 81, 156, 114, 112, 104, 93,
	98, 128, 111, 129, 99, 119, 118, 120, 0, 0,
	0, 142, 163, 176, 0, 0, 169, 170, 171, 172,
	0, 0, 0, 121, 84, 100, 139, 103, 110, 133,
	174, 125, 137, 87, 162, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 77, 107, 173, 132, 94, 164, 92,
	0, 0, 0, 0, 106, 0, 108, 0, 0, 141,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 130, 0,
	0, 149, 97, 96, 105, 0, 0, 0, 88, 0,
	136, 126, 161, 0, 127, 135, 109, 153, 131, 160,
	192, 168, 151, 167, 78, 150, 159, 86, 138, 80,
	157, 143, 115, 101, 102, 79, 0, 144, 145, 146,
	147, 148, 134, 91, 95, 90, 123, 154, 155, 89,
	175, 82, 166, 83, 165, 122, 152, 158, 116, 113,
	81, 156, 114, 112, 104, 93, 98, 128, 111, 129,
	99, 119, 118, 120, 0, 0, 0, 142, 163, 176,
	0, 0, 169, 170, 171, 172, 0, 0, 0, 121,
	84, 100, 139, 103, 110, 133, 174, 125, 137, 87,
	162, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 77,
	107, 173, 132, 94, 164, 92, 0, 0, 0, 0,
	106, 0, 108, 0, 0, 141, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 130, 0, 0, 149, 97, 96,
	105, 0, 0, 0, 88, 0, 136, 126, 161, 0,
	127, 135, 109, 153, 131, 160, 192, 168, 151, 167,
	78, 150, 159, 86, 138, 80, 157, 143, 115, 101,
	102, 79, 0, 144, 145, 146, 147, 148, 134, 91,
	95, 90, 123, 154, 155, 89, 175, 82, 166, 83,
	165, 122, 152, 158, 116, 113, 81, 156, 114, 112,
	104, 93, 98, 128, 111, 129, 99, 119, 118, 120,
	0, 0, 0, 142, 163, 176, 0, 0, 169, 170,
	171, 172, 0, 0, 0, 121, 84, 100, 139, 103,
	110, 133, 174, 125, 137, 87, 162, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 107, 173, 132, 94,
	164,
}

var yyPact = [...]int16{
	1689, -1000, -195, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 834, 878, -1000, -1000, -1000, -1000, -1000, -1000, 681,
	7309, 53, 78, -19, 10040, 77, 1341, 10718, -1000, -21,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 649, -1000, -1000,
	-1000, -1000, -1000, 825, 832, 699, 818, 736, -1000, 5458,
	52, 8909, 9814, 4753, -1000, 499, 75, 10718, -157, 10266,
	47, 47, 47, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 68, 10718, -1000,
	10718, 32, 497, 32, 32, 32, 10718, -1000, 114, -1000,
	-1000, -1000, -1000, 10718, 489, 776, 69, 2769, 2769, 2769,
	2769, -16, 2769, -96, 704, -1000, -1000, -1000, -1000, 2769,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	377, 785, 6167, 6167, 834, -1000, 649, -1000, -1000, -1000,
	765, -1000, -1000, 245, 855, -1000, 7083, 111, -1000, 6167,
	1766, 628, -1000, -1000, 628, -1000, -1000, 103, -1000, -1000,
	6621, 6621, 6621, 6621, 6621, 6621, 6621, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 628, -1000, 5932, 628, 628, 628, 628, 628, 628,
	628, 628, 6167, 628, 628, 628, 628, 628, 628, 628,
	628, 628, 628, 628, 628, 628, 9588, 646, 885, -1000,
	-1000, -1000, 813, 7996, 8683, 10718, 554, -1000, 615, 4505,
	-105, -1000, -1000, -1000, 179, 8448, -1000, -1000, -1000, 773,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 488, -1000, 1840, 484, 2769, 62, 655,
	483, 226, 482, 10718, 10718, 2769, 55, 10718, 811, 703,
	10718, 481, 480, -1000, 4257, -1000, 2769, 2769, 2769, 2769,
	2769, 2769, 2769, 2769, -1000, -1000, -1000, -1000, -1000, -1000,
	2769, 2769, -1000, -92, -1000, 10718, -1000, -1000, -1000, -1000,
	871, 144, 376, 110, 617, -1000, 344, 825, 377, 736,
	8222, 536, -1000, -1000, 10718, -1000, 6167, 6167, 289, -1000,
	9361, -1000, -1000, 3265, 148, 6621, 350, 173, 6621, 6621,
	6621, 6621, 6621, 6621, 6621, 6621, 6621, 6621, 6621, 6621,
	6621, 6621, 6621, 325, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 469, -1000, 649, 625, 625, 121, 121, 121,
	121, 121, 121, 6848, 4988, 377, 479, 301, 5932, 5458,
	5458, 6167, 6167, 10492, 10492, 5458, 819, 190, 301, 10492,
	-1000, 377, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5458,
	5458, 5458, 5458, 12, 10718, -1000, 10492, 8909, 8909, 8909,
	8909, 8909, -1000, 729, 723, -1000, 721, 720, 730, 10718,
	-1000, 477, 7996, 142, 628, -1000, 9135, -1000, -1000, 12,
	520, 8909, 10718, -1000, -1000, 4009, 615, -105, 609, -1000,
	-129, -110, 5693, 120, -1000, -1000, -1000, -1000, 2521, 204,
	292, -84, -1000, -1000, -1000, 650, -1000, 650, 650, 650,
	650, -54, -54, -54, -54, -1000, -1000, -1000, -1000, -1000,
	678, 676, -1000, 650, 650, 650, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 673, 673, 673,
	651, 651, 683, -1000, 10718, -173, 467, 2769, 810, 2769,
	-1000, 65, -1000, 10718, -1000, -1000, 10718, 2769, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 233, -1000, -1000, -1000, -1000, 745, 6167,
	6167, 3761, 6167, -1000, -1000, -1000, 785, -1000, 819, 836,
	-1000, 766, 751, 5458, -1000, -1000, 148, 250, -1000, -1000,
	323, -1000, -1000, -1000, -1000, 109, 628, -1000, 1490, -1000,
	-1000, -1000, -1000, 350, 6621, 6621, 6621, 67, 1490, 1815,
	1515, 412, 121, 277, 277, 136, 136, 136, 136, 136,
	623, 623, -1000, -1000, -1000, 377, -1000, -1000, -1000, 377,
	5458, 612, -1000, -1000, 6167, -1000, 377, 473, 473, 341,
	261, 654, -1000, 102, 645, 473, 5458, 258, -1000, 6167,
	377, -1000, 473, 377, 473, 473, 524, 628, -1000, 647,
	-1000, 178, 885, 664, 691, 767, -1000, -1000, -1000, -1000,
	719, -1000, 717, -1000, -1000, -1000, -1000, -1000, 74, 73,
	64, 10266, -1000, 845, 8909, 532, -1000, -1000, 609, -105,
	-139, -1000, -1000, -1000, 301, -1000, 460, 596, 2273, -1000,
	-1000, -1000, -1000, -1000, -1000, 661, 798, 177, 153, 409,
	-1000, -1000, 784, -1000, 234, -87, -1000, -1000, 357, -54,
	-54, -1000, -1000, 120, 772, 120, 120, 120, 367, 367,
	-1000, -1000, -1000, -1000, 339, -1000, -1000, -1000, 311, -1000,
	689, 10266, 2769, -1000, 3513, -1000, -1000, -1000, -1000, -1000,
	-1000, 421, 279, 200, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11, -1000, 2769, -1000, 231,
	10718, 10718, 743, 301, 301, 97, -1000, -1000, 10718, -1000,
	-1000, -1000, -1000, 565, -1000, -1000, -1000, 3017, 5458, -1000,
	67, 1490, 1653, -1000, 6621, 6621, -1000, -1000, 473, 5458,
	301, -1000, -1000, -1000, 133, 325, 133, 6621, 6621, 3761,
	6621, 6621, -169, 555, 185, -1000, 6167, 389, -1000, -1000,
	-1000, -1000, -1000, 687, 10492, 628, -1000, 7770, 10266, 834,
	10492, 6167, 6167, -1000, -1000, 6167, 660, -1000, 6167, -1000,
	-1000, -1000, 628, 628, 628, 433, -1000, 834, 532, -1000,
	-1000, -1000, -135, -121, -1000, -1000, 2521, -1000, 2521, 10266,
	-1000, 401, 394, -1000, -1000, 686, 37, -1000, -1000, -1000,
	400, 120, 120, -1000, 197, -1000, -1000, -1000, 466, -1000,
	464, 529, 444, 10718, -1000, -1000, 527, -1000, 175, -1000,
	-1000, 10266, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10266, 10718, -1000, -1000, -1000, -1000,
	-1000, 10266, -1000, -1000, 366, 6167, -1000, -1000, -1000, 3513,
	-1000, 845, 8909, -1000, -1000, 377, -1000, 6621, 1490, 1490,
	-1000, -1000, 377, 650, 650, -1000, 650, 651, -1000, 650,
	-30, 650, -34, 377, 377, 1412, 1634, -1000, 696, 1543,
	628, -166, -1000, 301, 6167, -1000, 802, 517, 525, -1000,
	-1000, 5223, 377, 440, 93, 433, 825, -1000, 301, 301,
	301, 10266, 301, 10266, 10266, 10266, 7544, 10266, 825, -1000,
	-1000, -1000, -1000, 2273, -1000, 430, -1000, 650, -1000, -1000,
	-80, 860, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -54, 364, -54, 307, -1000, 303, 2769,
	3513, 2521, -1000, 636, -1000, -1000, -1000, -1000, 805, -1000,
	301, 843, 526, -1000, 1490, -1000, -1000, 70, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6621, 6621, -1000,
	6621, 6621, 6621, 377, 362, 301, 794, -1000, 628, -1000,
	-1000, 700, 10266, 10266, -1000, -1000, 424, -1000, 407, 407,
	407, 142, -1000, -1000, 105, 10266, -1000, 145, -1000, -144,
	120, -1000, 120, 390, 381, -1000, -1000, -1000, 10266, 628,
	838, 827, -1000, -1000, 1475, 1475, 1475, 1475, 50, -1000,
	-1000, 858, -1000, 628, -1000, 649, 80, -1000, 10266, -1000,
	-1000, -1000, -1000, -1000, 105, -1000, 373, 156, 361, -1000,
	237, 793, -1000, 792, -1000, -1000, -1000, -1000, -1000, 399,
	-4, -1000, 6167, 6167, -1000, -1000, -1000, -1000, 377, 83,
	-176, 10492, 525, 377, 10266, -1000, -1000, -1000, 267, -1000,
	-1000, -1000, 359, -1000, -1000, 655, 380, -1000, 10266, 301,
	510, -1000, 742, -171, -188, 426, -1000, -1000, -1000, -1000,
	-173, -1000, -4, 750, -1000, 741, -1000, -1000, -1000, -7,
	-174, -9, -177, 628, -191, 6394, -1000, 1475, 377, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 1096, 91, 500, 1095, 1092, 1090, 1089, 1088, 1087,
	1086, 1084, 1083, 1082, 1079, 1076, 1075, 1073, 1072, 1070,
	1069, 1067, 1065, 1063, 83, 1062, 1061, 1060, 70, 1059,
	52, 1058, 1055, 34, 602, 71, 29, 641, 1054, 23,
	57, 113, 1053, 31, 1052, 1045, 54, 1042, 44, 1041,
	1040, 1046, 1038, 1037, 12, 26, 1036, 1035, 1034, 1033,
	50, 98, 1028, 1025, 1024, 1023, 1022, 1021, 41, 3,
	8, 6, 13, 1020, 340, 105, 1018, 39, 1017, 1016,
	1015, 1012, 32, 1011, 43, 1010, 21, 42, 1009, 11,
	68, 28, 19, 10, 53, 59, 1008, 25, 49, 35,
	1004, 1003, 397, 1002, 999, 998, 993, 992, 989, 129,
	328, 987, 986, 985, 984, 40, 186, 433, 17, 45,
	983, 981, 979, 1237, 51, 72, 15, 978, 20, 30,
	36, 975, 974, 27, 972, 971, 969, 953, 950, 941,
	940, 69, 939, 938, 937, 38, 14, 936, 934, 47,
	22, 923, 921, 920, 37, 46, 919, 61, 916, 912,
	911, 910, 24, 18, 909, 9, 908, 7, 907, 905,
	2, 903, 16, 897, 5, 896, 4, 33, 895, 894,
	0, 185, 892, 886, 55,
}

var yyR1 = [...]uint8{
	0, 178, 179, 179, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 182,
	182, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 131, 131,
	11, 11, 11, 11, 11, 11, 11, 176, 176, 175,
	174, 174, 173, 173, 172, 16, 159, 160, 160, 160,
	155, 134, 134, 134, 134, 137, 137, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 136,
	136, 136, 136, 136, 138, 138, 138, 138, 138, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 140, 140, 140, 140, 140, 140,
	140, 140, 154, 154, 141, 141, 149, 149, 150, 150,
	150, 147, 147, 148, 148, 151, 151, 151, 142, 142,
	142, 142, 142, 142, 142, 144, 144, 152, 152, 145,
	145, 145, 146, 146, 153, 153, 153, 153, 153, 143,
	143, 156, 156, 168, 168, 167, 167, 167, 158, 158,
	164, 164, 164, 164, 164, 157, 157, 166, 166, 165,
	161, 161, 161, 162, 162, 162, 163, 163, 163, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 171,
	169, 169, 170, 170, 13, 14, 14, 14, 14, 14,
	15, 15, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 107, 107, 104, 104,
	105, 105, 106, 106, 106, 108, 108, 108, 132, 132,
	132, 19, 19, 21, 21, 22, 23, 20, 20, 20,
	20, 20, 183, 24, 25, 25, 26, 26, 26, 30,
	30, 30, 28, 28, 29, 29, 35, 35, 34, 34,
	36, 36, 36, 36, 120, 120, 120, 119, 119, 38,
	38, 39, 39, 40, 40, 41, 41, 41, 53, 53,
	89, 89, 91, 91, 42, 42, 42, 42, 43, 43,
	44, 44, 45, 45, 127, 127, 126, 126, 126, 125,
	125, 47, 47, 47, 49, 48, 48, 48, 48, 50,
	50, 52, 52, 51, 51, 54, 54, 54, 54, 55,
	55, 37, 37, 37, 37, 37, 37, 37, 103, 103,
	57, 57, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 67, 67, 67, 67, 67, 67, 58, 58,
	58, 58, 58, 58, 58, 33, 33, 68, 68, 68,
	74, 69, 69, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 65, 65, 65, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 64, 64, 64, 64, 64, 64, 64, 64,
	184, 184, 66, 66, 66, 66, 31, 31, 31, 31,
	31, 130, 130, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 78, 78, 32, 32,
	76, 76, 77, 79, 79, 75, 75, 75, 60, 60,
	60, 60, 60, 60, 60, 60, 62, 62, 62, 80,
	80, 81, 81, 82, 82, 83, 83, 84, 85, 85,
	85, 86, 86, 86, 86, 87, 87, 87, 59, 59,
	59, 59, 59, 59, 88, 88, 88, 88, 92, 92,
	70, 70, 72, 72, 71, 73, 93, 93, 97, 94,
	94, 98, 98, 98, 96, 96, 96, 122, 122, 122,
	101, 101, 109, 109, 110, 110, 102, 102, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 112, 112,
	112, 113, 113, 114, 114, 114, 121, 121, 117, 117,
	118, 118, 123, 123, 124, 124, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	180, 181, 128, 129, 129, 129,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 8, 4, 6, 5, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 1, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 0, 2, 1, 2, 1, 0,
	2, 5, 4, 1, 2, 2, 3, 2, 0, 1,
	2, 3, 3, 2, 2, 1, 1, 1, 3, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 12, 7, 7, 7, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 4, 3, 6, 4, 2,
	4, 2, 2, 2, 2, 3, 1, 1, 0, 1,
	0, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -178, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 140, 116, 133, 49, 152, 153,
	155, 156, 25, 134, 135, 138, 139, -180, 8, 239,
	53, -179, 253, -82, 15, -26, 5, -24, -183, -24,
	-24, -24, -24, -24, -159, 53, -114, 121, 70, 148,
	231, 118, 119, 125, -117, 56, -116, 247, 152, 163,
	157, 188, 179, 181, 218, 65, 155, 227, 136, 177,
	173, 171, 27, 193, 251, 172, 131, 130, 194, 198,
	219, 161, 162, 221, 192, 132, 32, 248, 34, 144,
	222, 196, 191, 187, 190, 160, 186, 38, 200, 199,
	201, 217, 183, 174, 18, 225, 139, 142, 195, 197,
	126, 146, 250, 223, 170, 143, 138, 226, 156, 220,
	229, 37, 205, 159, 165, 166, 167, 168, 169, 129,
	153, 150, 184, 145, 175, 176, 189, 158, 185, 154,
	147, 140, 228, 206, 252, 182, 180, 151, 149, 210,
	211, 212, 213, 249, 224, 178, 207, -102, 121, 123,
	119, 119, 120, 121, 231, 118, 119, -51, -123, 56,
	-116, 121, 148, 119, 106, 181, 112, 208, 120, 32,
	146, -132, 119, -104, 149, 210, 211, 212, 213, 56,
	220, 219, 214, -123, 154, -128, -128, -128, -128, -128,
	-2, -86, 17, 16, -5, -3, -180, 6, 20, 21,
	-30, 39, 40, -25, -36, 97, -37, -123, -56, 72,
	-61, 29, 56, -116, 23, -60, -57, -75, -73, -74,
	106, 107, 95, 96, 103, 73, 108, -65, -63, -64,
	-66, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -117, -71, -180, 43, 44, 240, 241, 242, 243,
	246, 244, 75, 33, 230, 238, 237, 236, 234, 235,
	232, 233, 124, 231, 101, 239, -102, -39, -40, -41,
	-42, -53, -74, -180, -51, 11, -46, -51, -94, -131,
	154, -98, 220, 219, -118, -96, -117, -115, 218, 181,
	217, 117, 71, 22, 24, 203, 74, 106, 16, 75,
	105, 240, 112, 47, 232, 233, 230, 242, 243, 231,
	208, 29, 10, 25, 134, 21, 99, 114, 78, 79,
	137, 23, 135, 69, 19, 50, 11, 13, 14, 124,
	123, 90, 120, 45, 8, 108, 26, 87, 41, 28,
	43, 88, 17, 234, 235, 31, 246, 141, 101, 48,
	35, 72, 67, 51, 70, 15, 46, 89, 115, 239,
	44, 118, 6, 245, 30, 133, 42, 119, 209, 77,
	122, 68, 5, 125, 9, 49, 52, 236, 237, 238,
	33, 76, 12, -160, -155, 56, 120, -51, 239, -117,
	-110, 124, -110, -110, 119, -51, -51, -109, 124, 56,
	-109, -109, -109, -51, 109, -51, 56, 30, 231, 56,
	146, 119, 147, 121, -129, -180, -118, -129, -129, -129,
	150, 151, -129, -105, 215, 51, -129, -181, 55, -87,
	19, 31, -37, -123, -83, -84, -37, -82, -2, -24,
	35, -28, 21, 64, 11, -120, 71, 70, 87, -119,
	22, -117, 58, 109, -37, -58, 90, 72, 88, 89,
	74, 92, 91, 102, 95, 96, 97, 98, 99, 100,
	101, 93, 94, 105, 80, 81, 82, 83, 84, 85,
	86, -103, -180, -74, -180, 110, 111, -61, -61, -61,
	-61, -61, -61, -61, -180, -2, -69, -37, -180, -180,
	-180, -180, -180, -180, -180, -180, -180, -78, -37, -180,
	-184, -180, -184, -184, -184, -184, -184, -184, -184, -180,
	-180, -180, -180, -52, 26, -51, 30, 54, -47, -49,
	-48, -50, 41, 45, 47, 42, 43, 44, 48, -127,
	22, -39, -180, -126, 142, -125, 22, -123, 58, -51,
	-46, -182, 54, 11, 52, 54, -94, 154, -95, -99,
	221, 223, 80, -122, -117, 58, 29, 30, 55, 54,
	-134, -137, -139, -138, -140, -135, -136, 179, 180, 106,
	182, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 30, 136, 175, 176, 177, 178, 194, 195, 196,
	197, 198, 199, 200, 201, 157, 158, 159, 165, 166,
	167, 168, 169, 160, 161, 162, 163, 170, 171, 172,
	173, 174, 56, -129, 121, -176, 52, 56, 72, 56,
	-51, -51, -129, 122, -51, 23, 51, -51, 56, 56,
	-124, -123, -115, -129, -129, -129, -129, -129, -129, -129,
	-129, -129, -129, -107, 209, 216, -51, 9, 90, 54,
	18, 109, 54, -85, 24, 25, -86, -181, -30, -62,
	-117, 59, 62, -29, 42, -51, -37, -37, -67, 67,
	72, 68, 69, -119, 97, -124, -118, -115, -61, -68,
	-71, -74, 63, 90, 88, 89, 74, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -130, 56, 58, 56, -60, -60, -117, -35,
	21, -34, -36, -181, 54, -181, -2, -34, -34, -37,
	-37, -75, -117, -123, -75, -34, -28, -76, -77, 76,
	-75, -181, -34, -35, -34, -34, -90, 142, -51, -93,
	-97, -75, -40, -41, -41, -40, -41, 41, 41, 41,
	46, 41, 46, 41, -48, -123, -181, -54, 49, 123,
	50, -180, -125, -90, 52, -39, -51, -98, -95, 54,
	222, 224, 225, 51, -37, -146, 105, -161, -162, -163,
	-118, 58, 59, -155, -156, -164, 126, 129, 125, -157,
	120, 28, -151, 67, 72, -147, 206, -141, 53, -141,
	-141, -141, -141, -145, 181, -145, -145, -145, 53, 53,
	-141, -141, -141, -149, 53, -149, -149, -150, 53, -150,
	-121, 52, -51, -174, 249, -175, 56, -129, 23, -129,
	-111, 117, 114, 115, -171, 113, 203, 181, 65, 29,
	15, 240, 142, 252, 56, 143, -51, -51, -129, -106,
	11, 90, 37, -37, -37, -124, -84, -87, -101, 19,
	11, 33, 33, -34, 67, 68, 69, 109, -180, -68,
	-61, -61, -61, -33, 137, 71, -181, -181, -34, 54,
	-37, -181, -181, -181, 54, 52, 22, 54, 11, 109,
	54, 11, -181, -34, -79, -77, 78, -37, -181, -181,
	-181, -181, -181, -59, 30, 33, -2, -180, -180, -55,
	54, 12, 80, -44, -43, 51, 52, -45, 51, -43,
	41, 41, 120, 120, 120, -91, -117, -55, -39, -55,
	-99, -100, 226, 223, 229, 56, 54, -163, 80, 53,
	28, -157, -157, 56, 56, -142, 29, 67, -148, 207,
	59, -145, -145, -146, 30, -146, -146, -146, -154, 58,
	-154, 59, 59, 51, -117, -129, -173, -172, -118, -128,
	-177, 148, 127, 128, 131, 130, 56, 120, 28, 126,
	129, 142, 125, -177, 148, -112, -113, 122, 22, 120,
	28, 142, -129, -108, 88, 12, -123, -123, 38, 109,
	-51, -38, 11, 97, -118, -35, -33, 71, -61, -61,
	-181, -36, -133, 106, 179, 136, 177, 173, 192, 183,
	205, 175, 206, -130, -133, -61, -61, -118, -61, -61,
	247, -82, 79, -37, 77, -92, 51, -93, -70, -72,
	-71, -180, -2, -88, -117, -91, -82, -97, -37, -37,
	-37, 53, -37, -180, -180, -180, -181, 54, -82, -55,
	223, 227, 228, -162, -163, -166, -165, -117, 56, 56,
	-144, 51, 58, 59, 60, 67, 230, 66, 55, -146,
	-146, 56, 106, 55, 54, 55, 54, 55, 54, -51,
	54, 80, -128, -117, -128, -117, -51, -128, -117, 58,
	-37, -55, -39, -181, -61, -181, -141, -141, -141, -150,
	-141, 162, -141, 162, -181, -181, -181, 54, 19, -181,
	54, 19, -180, -32, 245, -37, 27, -92, 54, -181,
	-181, -181, 54, 109, -181, -86, -89, -117, -89, -89,
	-89, -126, -117, -86, 55, 54, -141, -152, 203, 9,
	-145, 58, -145, 59, 59, -129, -172, -163, 53, 26,
	-80, 13, -145, 56, -61, -61, -61, -61, -61, -181,
	58, 28, -72, 33, -2, -180, -117, -117, 54, 55,
	-181, -181, -181, -54, -168, -167, 52, 132, 65, -165,
	-153, 126, 28, 125, 230, -146, -146, 55, 55, -89,
	-180, -81, 14, 16, -181, -181, -181, -181, -31, 90,
	249, 9, -70, -2, 109, -117, -167, 56, -158, 80,
	58, -143, 65, 28, 28, 55, -169, -170, 142, -37,
	-69, -181, 169, 48, 250, -93, -181, -117, 59, 58,
	-176, -181, 54, -117, 38, 248, 251, -174, -170, 33,
	38, 144, 249, 145, 250, -180, 251, -61, 141, -181,
	-181,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 513, 0, 282, 282, 282, 282, 282, 282, 0,
	583, 566, 0, 0, 0, 0, -2, 272, 273, 0,
	275, 276, 792, 792, 792, 792, 792, 0, 33, 34,
	790, 1, 3, 521, 0, 0, 286, 289, 284, 0,
	566, 0, 0, 0, 60, 0, 0, 779, 0, 780,
	564, 564, 564, 584, 585, 588, 589, 688, 689, 690,
	691, 692, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 0, 0, 567,
	0, 562, 0, 562, 562, 562, 0, 231, 353, 592,
	593, 779, 780, 0, 0, 0, 0, 793, 793, 793,
	793, 0, 793, 260, 249, 251, 252, 253, 254, 793,
	269, 270, 259, 271, 274, 277, 278, 279, 280, 281,
	27, 525, 0, 0, 513, 29, 0, 282, 287, 288,
	292, 290, 291, 283, 0, 300, 304, 0, 361, 0,
	366, 368, -2, -2, 0, 403, 404, 405, 406, 407,
	0, 0, 0, 0, 0, 0, 0, 430, 431, 432,
	433, 498, 499, 500, 501, 502, 503, 504, 505, 370,
	371, 495, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 486, 0, 460, 460, 460, 460, 460, 460,
	460, 460, 0, 0, 0, 0, 0, 0, 311, 313,
	314, 315, 334, 0, 336, 0, 0, 41, 45, 0,
	770, 549, -2, -2, 0, 0, 590, 591, -2, 694,
	-2, 596, 597, 598, 599, 600, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 0, 77, 0, 0, 793, 0, 67,
	0, 0, 0, 0, 0, 793, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 232, 793, 793, 793, 793,
	793, 793, 793, 793, 241, 794, 795, 242, 243, 244,
	793, 793, 246, 0, 261, 0, 255, 28, 791, 22,
	0, 0, 522, 0, 514, 515, 518, 521, 27, 289,
	0, 294, 293, 285, 0, 301, 0, 0, 0, 305,
	0, 307, 308, 0, 364, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 388, 389, 390, 391, 392, 393,
	394, 367, 0, 381, 0, 0, 0, 423, 424, 425,
	426, 427, 428, 0, 296, 27, 0, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 0, 487, 0,
	452, 0, 453, 454, 455, 456, 457, 458, 459, 0,
	296, 0, 0, 43, 0, 352, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 344, 0, 0, 0, 0,
	335, 0, 0, 355, 738, 337, 0, 339, 340, -2,
	0, 0, 0, 39, 40, 0, 46, 770, 48, 49,
	0, 0, 0, 162, 557, 558, 559, 555, 190, 0,
	145, 141, 82, 83, 84, 134, 86, 134, 134, 134,
	134, 159, 159, 159, 159, 117, 118, 119, 120, 121,
	0, 0, 104, 134, 134, 134, 108, 124, 125, 126,
	127, 128, 129, 130, 131, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 136, 136, 136,
	138, 138, 586, 62, 0, 70, 0, 793, 0, 793,
	75, 0, 206, 0, 225, 563, 0, 793, 228, 229,
	354, 594, 595, 233, 234, 235, 236, 237, 238, 239,
	240, 245, 248, 262, 256, 257, 250, 526, 0, 0,
	0, 0, 0, 517, 519, 520, 525, 30, 292, 0,
	506, 0, 0, 0, 295, 25, 362, 363, 365, 382,
	0, 384, 386, 306, 302, 0, 496, -2, 372, 373,
	397, 398, 399, 0, 0, 0, 0, 395, 377, 0,
	408, 409, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 422, 471, 472, 0, 420, 421, 429, 0,
	0, 297, 298, 400, 0, 544, 27, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 493, 490, 0,
	0, 461, 0, 0, 0, 0, 0, 0, 351, 359,
	546, 0, 312, 330, 332, 0, 327, 342, 343, 345,
	0, 347, 0, 349, 350, 316, 317, 318, 0, 0,
	0, 0, 338, 359, 0, 359, 42, 550, 47, 0,
	0, 52, 53, 551, 552, 553, 0, 76, 191, 193,
	196, 197, 198, 78, 79, 0, 0, 0, 0, 0,
	185, 186, 148, 146, 0, 143, 142, 85, 0, 159,
	159, 111, 112, 162, 0, 162, 162, 162, 0, 0,
	105, 106, 107, 99, 0, 100, 101, 102, 0, 103,
	0, 0, 793, 64, 0, 68, 69, 65, 565, 66,
	792, 0, 0, 578, 207, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 0, 224, 793, 227, 265,
	0, 0, 0, 523, 524, 0, 516, 23, 0, 560,
	561, 507, 508, 309, 383, 385, 387, 0, 296, 374,
	395, 378, 0, 375, 0, 0, 369, 434, 0, 0,
	402, -2, 437, 438, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 513, 0, 491, 0, 0, 451, 462,
	463, 464, 465, 538, 0, 0, -2, 0, 0, 513,
	0, 0, 0, 324, 331, 0, 0, 325, 0, 326,
	346, 348, 0, 0, 0, 0, 322, 513, 359, 38,
	50, 51, 0, 0, 57, 163, 0, 194, 0, 0,
	180, 0, 0, 183, 184, 155, 0, 147, 81, 144,
	0, 162, 162, 113, 0, 114, 115, 116, 0, 132,
	0, 0, 0, 0, 587, 63, 71, 72, 0, 199,
	792, 0, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 792, 0, 0, 792, 579, 580, 581,
	582, 0, 226, 247, 0, 0, 263, 264, 527, 0,
	24, 359, 0, 303, 497, 0, 376, 0, 396, 379,
	435, 299, 0, 134, 134, 476, 134, 138, 479, 134,
	481, 134, 484, 0, 0, 0, 0, 496, 0, 0,
	0, 488, 450, 494, 0, 31, 0, 538, 528, 540,
	542, 0, 27, 0, 534, 0, 521, 547, 360, 548,
	328, 0, 333, 0, 0, 0, 336, 0, 521, 37,
	54, 55, 56, 192, 195, 0, 187, 134, 181, 182,
	157, 0, 149, 150, 151, 152, 153, 154, 135, 109,
	110, 160, 161, 159, 0, 159, 0, 139, 0, 793,
	0, 0, 200, 0, 201, 203, 204, 205, 0, 266,
	267, 509, 310, 436, 380, 439, 473, 159, 477, 478,
	480, 482, 483, 485, 441, 440, 442, 0, 0, 445,
	0, 0, 0, 0, 0, 492, 0, 32, 0, 543,
	-2, 0, 0, 0, 44, 35, 0, 320, 0, 0,
	0, 355, 323, 36, 172, 0, 189, 164, 158, 0,
	162, 133, 162, 0, 0, 61, 73, 74, 0, 0,
	511, 0, 474, 475, 0, 0, 0, 0, 466, 449,
	489, 0, 541, 0, -2, 0, 536, 535, 0, 329,
	356, 357, 358, 319, 171, 173, 0, 178, 0, 188,
	169, 0, 166, 168, 156, 122, 123, 137, 140, 0,
	0, 26, 0, 0, 443, 444, 446, 447, 0, 0,
	0, 0, 531, 27, 0, 321, 174, 175, 0, 179,
	177, 80, 0, 165, 167, 67, 0, 220, 0, 512,
	510, 448, 0, 0, 0, 539, -2, 537, 176, 170,
	70, 219, 0, 0, 467, 0, 470, 202, 221, 0,
	468, 0, 0, 0, 0, 0, 469, 0, 0, 222,
	223,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 253,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:304
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:309
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:310
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:314
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:337
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:345
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:349
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:355
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:362
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:368
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:372
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:378
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:382
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:389
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:401
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:413
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:417
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:423
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:429
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:433
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:437
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:442
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:447
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:451
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:456
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:460
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:466
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:470
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:474
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:478
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:484
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:488
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:494
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:498
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:502
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:512
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:516
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:520
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:526
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:530
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:536
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:541
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:546
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:550
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:554
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:562
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:566
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:571
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:575
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:581
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:586
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:591
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:597
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:602
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:608
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:614
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:621
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:628
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:633
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:637
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:643
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:654
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:665
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:670
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:680
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:684
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:692
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:882
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:887
		{
			yyVAL.optVal = nil
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:891
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:896
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:900
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:908
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:912
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:918
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:926
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:930
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:935
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:939
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:945
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:949
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:953
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:958
		{
			yyVAL.optVal = nil
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:962
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:966
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:970
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:974
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:978
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:982
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:987
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:991
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:996
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1000
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1009
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1013
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1018
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1022
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1031
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1035
		{
			yyVAL.colKeyOpt = colKey
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1039
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1043
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1048
		{
			yyVAL.optVal = nil
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1052
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1058
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1062
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1068
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1072
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1078
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1082
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1087
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1093
		{
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1097
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1107
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1111
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1115
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1125
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1129
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1135
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1139
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1150
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1158
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			yyVAL.str = yyDollar[1].str
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1174
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1194
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1198
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1202
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1206
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1219
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1229
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1234
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1239
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 207:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1243
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1262
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1268
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1272
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 222:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1278
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 223:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1282
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1288
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1294
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 226:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1302
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1307
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1315
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1319
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1325
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1329
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1334
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1353
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1365
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1369
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1373
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1377
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1381
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1385
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1389
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1393
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1397
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1411
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1415
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1419
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1423
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1427
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1431
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1447
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1451
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1457
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1461
		{
			yyVAL.str = "extended "
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1467
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1471
		{
			yyVAL.str = "full "
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1477
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1481
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1485
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1491
		{
			yyVAL.showFilter = nil
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1495
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1499
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1505
		{
			yyVAL.str = ""
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1509
		{
			yyVAL.str = SessionStr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1513
		{
			yyVAL.str = GlobalStr
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &Begin{}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &Begin{}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &Commit{}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1545
		{
			yyVAL.statement = &Rollback{}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &OtherRead{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1559
		{
			yyVAL.statement = &OtherRead{}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1563
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1567
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1572
		{
			setAllowComments(yylex, true)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1576
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1582
		{
			yyVAL.bytes2 = nil
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1586
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1592
		{
			yyVAL.str = UnionStr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1596
		{
			yyVAL.str = UnionAllStr
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1600
		{
			yyVAL.str = UnionDistinctStr
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1605
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1609
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.str = SQLCacheStr
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1618
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1622
		{
			yyVAL.str = DistinctStr
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1627
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1631
		{
			yyVAL.str = StraightJoinHint
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1636
		{
			yyVAL.selectExprs = nil
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1640
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1646
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1650
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1656
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1660
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1664
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1668
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1673
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1677
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1681
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1688
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1693
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1697
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1703
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1707
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1717
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1721
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1725
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1731
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1735
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1741
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1745
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1751
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1755
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1768
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1772
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1776
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1780
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1786
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1788
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1792
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1794
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1798
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1800
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1803
		{
			yyVAL.empty = struct{}{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.empty = struct{}{}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1808
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1812
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1816
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1823
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1829
		{
			yyVAL.str = JoinStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1833
		{
			yyVAL.str = JoinStr
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1837
		{
			yyVAL.str = JoinStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.str = StraightJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1849
		{
			yyVAL.str = LeftJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1853
		{
			yyVAL.str = LeftJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1857
		{
			yyVAL.str = RightJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1861
		{
			yyVAL.str = RightJoinStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1867
		{
			yyVAL.str = NaturalJoinStr
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1871
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1881
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1885
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1895
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1900
		{
			yyVAL.indexHints = nil
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1904
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1908
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 358:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1912
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1917
		{
			yyVAL.expr = nil
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1921
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1927
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1931
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1939
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1943
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1951
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1957
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1961
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1967
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1971
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1977
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1981
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1985
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1989
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1993
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1997
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2001
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2005
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 380:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2009
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2013
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2019
		{
			yyVAL.str = IsNullStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2023
		{
			yyVAL.str = IsNotNullStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2027
		{
			yyVAL.str = IsTrueStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2031
		{
			yyVAL.str = IsNotTrueStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2035
		{
			yyVAL.str = IsFalseStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2039
		{
			yyVAL.str = IsNotFalseStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2045
		{
			yyVAL.str = EqualStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2049
		{
			yyVAL.str = LessThanStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2053
		{
			yyVAL.str = GreaterThanStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2057
		{
			yyVAL.str = LessEqualStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.str = GreaterEqualStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2065
		{
			yyVAL.str = NotEqualStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2069
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2074
		{
			yyVAL.expr = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2078
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2084
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2088
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2092
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2098
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2108
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2118
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2122
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2126
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2130
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2134
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2138
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2142
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2146
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2150
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2158
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2162
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2166
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2170
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2174
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2178
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2186
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2190
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2194
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2198
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2202
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2210
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2224
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2228
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2232
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 436:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2268
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2272
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2276
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2280
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2284
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2288
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 443:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2292
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 444:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2296
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 446:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 448:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 449:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2338
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2351
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2361
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2366
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2398
		{
			yyVAL.str = ""
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2402
		{
			yyVAL.str = BooleanModeStr
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2406
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 469:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2410
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2414
		{
			yyVAL.str = QueryExpansionStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2420
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2424
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2430
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2434
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2438
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2442
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2446
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2450
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2456
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2460
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2464
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2468
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2472
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2476
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2480
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = nil
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2494
		{
			yyVAL.str = string("")
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2498
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2504
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2508
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2514
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = nil
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2529
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2533
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 497:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2537
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2543
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2547
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2567
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = &NullVal{}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2577
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2590
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2595
		{
			yyVAL.exprs = nil
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2599
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = nil
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2613
		{
			yyVAL.orderBy = nil
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2617
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2623
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2627
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2633
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2638
		{
			yyVAL.str = AscScr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2642
		{
			yyVAL.str = AscScr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2646
		{
			yyVAL.str = DescScr
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2651
		{
			yyVAL.limit = nil
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2655
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2659
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2663
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2668
		{
			yyVAL.str = ""
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2672
		{
			yyVAL.str = ForUpdateStr
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2676
		{
			yyVAL.str = ShareModeStr
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2689
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2693
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2697
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2702
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2706
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 533:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2710
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2717
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2721
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2725
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2729
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2734
		{
			yyVAL.updateExprs = nil
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2738
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2744
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2748
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2754
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2758
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2764
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2780
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2784
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2790
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2796
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2800
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2806
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2810
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2814
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			yyVAL.bytes = []byte("charset")
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = &Default{}
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2845
		{
			yyVAL.byt = 0
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			yyVAL.byt = 1
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2850
		{
			yyVAL.empty = struct{}{}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2852
		{
			yyVAL.empty = struct{}{}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2855
		{
			yyVAL.str = ""
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2857
		{
			yyVAL.str = IgnoreStr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2863
		{
			yyVAL.empty = struct{}{}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2865
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2867
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2869
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2871
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2873
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2875
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2877
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2879
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2882
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2884
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2890
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2895
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2897
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2899
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2902
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2904
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2908
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2912
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2919
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2925
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2929
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2936
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3156
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3165
		{
			decNesting(yylex)
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3170
		{
			forceEOF(yylex)
		}
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3175
		{
			forceEOF(yylex)
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			forceEOF(yylex)
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
